======================================================================
The Internet Communications Engine
======================================================================

Ice is a modern alternative to object middleware such as CORBA or
COM/DCOM/COM+. It is easy to learn, yet provides a powerful network
infrastructure for demanding technical applications. It features an
object-oriented specification language, easy to use C++, C#, Java,
Python, Ruby, PHP, and Visual Basic mappings, a highly efficient
protocol, asynchronous method invocation and dispatch, dynamic
transport plug-ins, TCP/IP and UDP/IP support, SSL-based security, a
firewall solution, and much more.

Ice is available under the terms of the GNU General Public License
(GPL) (see LICENSE file). Commercial licenses are available for
customers who wish to use Ice with proprietary products. Please
contact sales@zeroc.com for more information about licensing Ice.


======================================================================
About this distribution
======================================================================

This distribution is a binary release of Ice @ver@ for Linux and
includes the following components:

- The Ice runtime, including executables for the Ice services and 
  Slice files.

- Run time libraries for C++, Java, Python, C# (Mono), Ruby and PHP.
  These libraries enable you to execute Ice applications.

- Tools and libraries for developing Ice applications.


======================================================================
Requirements
======================================================================

This binary distribution was compiled on Red Hat Enterprise Linux 4
update 4 (RHEL4), using the default C++ compiler (GCC 3.4.6).

This distribution depends on a number of third-party libraries:

- expat
- OpenSSL
- bzip2

All of these libraries are included with your RHEL4 distribution in
the following RPMs:

expat:	       expat
OpenSSL:       openssl
bzip2:         bzip2-libs


Java
----

Ice for Java requires Java 1.4.2, 1.5.0 or 1.6.0. RPMs can be obtained 
from Sun Microsystems at http://java.sun.com.


Python
------

The Ice extension for Python included in this distribution requires
the installation of the RHEL4 python RPM.


C#
--

Ice for C# requires Mono 1.2.2 or later. You can download an RPM at:

  http://www.go-mono.com/download/x86/mono/1.2.2.1/mono-core-1.2.2.1-0.novell.i586.rpm
  http://www.go-mono.com/download/x86_64/mono/1.2.2.1/mono-core-1.2.2.1-0.novell.x86_64.rpm


Ruby
----

The Ice extension for Ruby included in this distribution requires the
installation of the RHEL4 ruby RPM.


PHP
---

The Ice extension for PHP included in this distribution requires
PHP 5.1.6. You can download the appropriate RPMs from the Centos Plus
repository:

  http://mirror.centos.org/centos/4/centosplus/i386/RPMS/php-pear-1.4.9-1.2.centos.noarch.rpm

  http://mirror.centos.org/centos/4/centosplus/i386/RPMS/php-5.1.6-1.2.1.centos.i386.rpm
  http://mirror.centos.org/centos/4/centosplus/i386/RPMS/php-devel-5.1.6-1.2.1.centos.i386.rpm

  http://mirror.centos.org/centos/4/centosplus/x86_64/RPMS/php-5.1.6-1.2.1.centos.x86_64.rpm
  http://mirror.centos.org/centos/4/centosplus/x86_64/RPMS/php-devel-5.1.6-1.2.1.centos.x86_64.rpm


======================================================================
Berkeley DB
======================================================================

This distribution includes the C++ and Java runtime for Berkeley DB
4.5.20. The Berkeley DB license is provided in the file 
THIRD_PARTY_LICENSE.


======================================================================
Setting up your environment to use Ice
======================================================================


General
-------

If you have installed Ice in a non-default location (i.e., other than
/opt/Ice-@ver@), setting ICE_HOME is required if you wish to:

 - Run the iceca utility script found in Ice-@ver@/bin.

 - Build the C++, Java or C# demos in the Ice example source code
   archive.

In order to use Ice services and tools such as Slice translators, you
need to add the location of the Ice binaries to your PATH as shown in
the bash command below:

$ export PATH=<Ice installation directory>/bin:$PATH

Ice shared libraries and executables in this distribution contain 
/opt/Ice-@mmver@/lib as the embedded runpath. In order to run Ice
services and tools, you can do one of the following:

 - Create a symbolic link /opt/Ice-@mmver@ that points to your Ice
   installation:

   $ ln -s <Ice installation directory> /opt/Ice-@mmver@

 - Add $ICE_HOME/lib to your LD_LIBRARY_PATH environment variable:

   $ export LD_LIBRARY_PATH=<Ice installation directory>/lib:$LD_LIBRARY_PATH

   With the x86_64 distribution, libraries are installed in <Ice
   installation directory>/lib64; if you use this distribution, set
   your LD_LIBRARY_PATH as follows:

   $ export LD_LIBRARY_PATH=<Ice installation directory>/lib64:$LD_LIBRARY_PATH


C++
---

When compiling Ice for C++ programs, you must pass the Ice include
directory to the compiler with the -I option, and the Ice library
directory with the -L option. Furthermore, a C++ program needs to link
with at least libIce and libIceUtil, so a typical link command would
look like this:

$ c++ -I <Ice installation directory>/include -o myprogram myprogram.o \
  -L<Ice installation directory>/lib -lIce -lIceUtil
  
Use -L<Ice installation directory>/lib64 instead of -L<Ice installation
directory>/lib for 64-bit builds.

Additional libraries are necessary if you are using an Ice service
such as IceGrid or Glacier2.


Java
----

To use Ice for Java, you must add Ice.jar to your CLASSPATH, as shown
below:

$ export CLASSPATH=<Ice installation directory>/lib/Ice.jar:$CLASSPATH

To use the Java2 version of Ice instead, modify your CLASSPATH as
follows:

$ export CLASSPATH=<Ice installation directory>/lib/java2/Ice.jar:$CLASSPATH

If you plan to use Freeze for persistence, you must also add the
Berkeley DB JAR file (db.jar) to your CLASSPATH:

$ export CLASSPATH=<Ice installation directory>/lib/db.jar:$CLASSPATH

In addition, the JVM requires that the directory containing the
Berkeley DB libraries be listed in java.library.path, therefore you
must add this directory to your LD_LIBRARY_PATH.

When using the Ice for Java SSL plugin (IceSSL), you may experience
occasional hangs. The most likely reason is that your system's entropy
pool is empty. If you have sufficient system privileges, you can solve
this issue by editing the following file

<java.home>/jre/lib/security/java.security

and changing it to use /dev/urandom instead of /dev/random. If you do
not have permission to modify the security file, you can also use the
command-line option shown below:

$ java -Djava.security.egd=file:/dev/urandom MyClass ...

On Linux systems with IPv6 enabled, you may experience occasional
hangs the first time an Ice object adapter is activated within a JVM.
A work-around is to disable IPv6 support by setting the Java property
java.net.preferIPv4Stack to true. For example:

$ java -Djava.net.preferIPv4Stack=true MyClass ...

For more information on this issue, refer to Sun's bug database:

  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6483406

Ice includes ant tasks for translating Slice to Java. The ant tasks
allow slice2java and slice2freezej to be invoked from the ant build
system. These tasks require one of the following:

 - Specify the location of the Ice installation containing the
   translators with the ice.home property:

   ant -Dice.home=/home/bill/Ice-@ver@

 - Set the ICE_HOME environment variable to specify the location of
   the Ice installation containing the translators:

   $ export ICE_HOME=/home/bill/Ice-@ver@

 - If neither ice.home nor ICE_HOME is available, the ant tasks will
   simply invoke the translator without an absolute path, relying on
   the translators being in a directory in your PATH for successful
   execution.
   

Python
------

To use Ice for Python, the PYTHONPATH environment variable must be
updated so that the interpreter can load the Ice extension and
supporting Python files:

$ export PYTHONPATH=<Ice installation directory>/python:$PYTHONPATH


C#/Mono
-------

You can update MONO_PATH with the directory containing the Ice for C#
runtime libraries, as the following bash command shows:

$ export MONO_PATH=<Ice installation directory>/bin:$MONO_PATH

Alternatively, you can add the libraries to the GAC yourself using a
command like this:

$ gacutil -i bin/icecs.dll

The instructions for running the demos assume that you have configured
your kernel to automatically execute the Mono interpreter. To do this,
run the following commands as root (replace /usr/bin/mono with the
location of your mono interpreter):

    if [ ! -e /proc/sys/fs/binfmt_misc/register ]; then
        /sbin/modprobe binfmt_misc 
        mount -t binfmt_misc none /proc/sys/fs/binfmt_misc
    fi 
    if [ -e /proc/sys/fs/binfmt_misc/register ]; then
        echo ':CLR:M::MZ::/usr/bin/mono:' > /proc/sys/fs/binfmt_misc/register
    else
        echo "No binfmt_misc support" exit 1
    fi 

If you don't want to do this you need to run the executable with
mono. For example,

$ mono server.exe


Ruby
---

To use Ice for Ruby, the RUBYLIB environment variable must be updated
so that the interpreter can locate the Ruby extension.

$ export RUBYLIB=<Ice installation directory>/ruby:$RUBYLIB


PHP
---

The Ice extension for PHP must be added to your PHP configuration by
editing php.ini and adding the following lines:

extension_dir = <Ice installation directory>/lib
extension = IcePHP.so

(With the x86_64 distribution, use <Ice installation directory>/lib64
instead of <Ice installation directory>/lib)

At run time, the PHP interpreter requires the Ice shared libraries as
well as the Slice preprocessor (<Ice installation
directory>/bin/icecpp), therefore these components must be in a
standard location or accessible via the PATH and LD_LIBRARY_PATH
environment variables.

You can verify that the Ice extension is installed properly by
examining the output of the "php -m" command, or by calling the
phpinfo() function from a script.


SELinux Notes
-------------

SELinux augments the traditional Unix permissions with a number of
new features. In particular, SELinux can prevent the httpd daemon from
opening network connections and reading files without the proper
SELinux types.

If you suspect that your IcePHP application does not work due to
SELinux restrictions, we recommend that you first try it with SELinux
disabled. As root, run:

# setenforce 0

to disable SELinux until the next reboot of your computer.

If you want to run httpd with IcePHP and SELinux enabled, you must do
the following:

- Allow httpd to open network connections:

  # setsebool httpd_can_network_connect=1 

  (add the -P option to make this setting persistent across reboots)

- Make sure any .ice file used by your PHP scripts can be read by 
  httpd. The enclosing directory also needs to be accessible. For
  example:

  # chcon -R -t httpd_sys_content_t /opt/MyApp/slice 

For more information on SELinux in Red Hat Enterprise Linux 4, refer
to the link below:

  http://www.redhat.com/docs/manuals/enterprise/RHEL-4-Manual/selinux-guide/


======================================================================
Using the IceGrid Administrative Console
======================================================================

A Java-based graphical tool for administering IceGrid applications
is included in this distribution. The Java archive file is installed
as

<Ice installation directory>/lib/IceGridGUI.jar

With a suitable Java installation, you can execute the application
using the following command:

$ java -jar IceGridGUI.jar


======================================================================
Demos
======================================================================

Sample programs are provided in the Ice-@ver@-demos.tar.gz package,
which can be downloaded from the ZeroC web site at

  http://www.zeroc.com/download.html

Please refer to the README.DEMOS file included in that package for
more information.


======================================================================
Binary compatibility
======================================================================

Ice patch releases are binary compatible. For example, Ice version 
<x>.<y>.1 is compatible with <x>.<y>.0: you can run an application 
built against Ice <x>.<y>.0 with Ice <x>.<y>.1 (or later) without 
having to recompile or relink this application.

Please refer to the RELEASE_NOTES.txt file included in this
distribution for detailed upgrade instructions.
