Build instructions
------------------

This version of Ice for C# requires Mono version 1.1.9.

Unpack the archive. The sources will be contained in the 
IceCS-@ver@ subdirectory.

You will need the Slice to C# translator and supporting executables
and libraries. You can download a binary distribution from the ZeroC
web site, or you can build Ice for C++ yourself.

Binary distributions for the supported platforms are available at

http://www.zeroc.com/download.html


To build Ice for C#, run

$ make

in the top-level directory.


Configuring Linux to recognize Mono binaries
--------------------------------------------

Mono binaries are interpreted so, given a binary called "foo", you
have to run the Mono interpreter with an argument "foo" to execute
that binary, like so:

$ mono foo

If you want to avoid having to explicitly invoke the Mono interpreter,
you can run the following commands (as root) to make your kernel
recognize Mono binaries and automatically launch the interpreter.
(Replace /opt/mono/bin/mono with the location of your mono interpreter
in the commands below.)

    if [ ! -e /proc/sys/fs/binfmt_misc/register ]; then
        /sbin/modprobe binfmt_misc mount -t binfmt_misc none /proc/sys/fs/binfmt_misc
    fi 
    if [ -e /proc/sys/fs/binfmt_misc/register ]; then
        echo ':CLR:M::MZ::/usr/bin/mono:' > /proc/sys/fs/binfmt_misc/register
    else
        echo "No binfmt_misc support" exit 1
    fi 

With this change, assuming that the execute bit is set on the binary,
you can execute the binary directly:

$ foo

This does not change your kernel, but the modules that are loaded when
you boot your system, so you will not lose the change if you upgrade
the kernel or Mono.


Running the tests
-----------------

You must add <mono_install_dir>/lib to your LD_LIBRARY_PATH.

You must add IceCS-@ver@/bin to your MONO_PATH. (Don't forget to export
MONO_PATH). Alternatively, you can install the Ice DLLs (from the bin
directory) in the Global Assembly Cache (GAC), using gacutil -i
<name>. For example:

$ gacutil -i icecs.dll

To run the tests, you will need Python:

http://www.python.org/download

Run "python allTests.py" from the top-level directory to run all of the
tests, or "python allTests.py -l" to run the tests in an endless loop.

You can also run individual tests in the various test directories with
"python run.py".

If you have the Mono run time installed under Windows (see
INSTALL.WINDOWS), you can also execute the tests using the Mono run
time (instead of the .NET run time). To do this, add the -m option to
allTests.py or run.py.


Running the demos
-----------------

To run the demos, you need to have IceCS-@ver@/bin in your MONO_PATH (or
install the Ice DLLs in the GAC, as for running the tests).  See the
README file in each demo directory for a description of each demo.


Installation
------------

On Linux, open config/Make.rules.cs and change the "prefix" variable
to hold the top-level installation directory. This directory will be
created automatically if necessary. Also review the comments for the
"no_gac" variable and decide whether to enable it. Next, run

    make install

On other platforms, copy the libraries from IceCS-@ver@/bin to the
desired location.

After installation, add the directory containing the libraries to
your MONO_PATH. When building applications, you need to reference
the libraries with the -r option to mcs.

Alternatively, you can add the libraries to the global assembly cache.
To do this, use

    gacutil -i <path_to_lib.dll>

Once installed in the cache, the assemblies will always be located
correctly without having to set environment variables.

Finally, you could also copy the necessary libraries into the
directory that contains the .exe for your application.


Known Issues
------------

- Binary compatibility: Mono currently has issues with forwarding
  requests to load a particular version of the runtime to a different
  version. Until this is resolved in Mono, you cannot run applications
  compiled with 3.0.0 against the 3.0.1 runtime.
