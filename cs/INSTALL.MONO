Build instructions
------------------

This version of Ice for C# requires Mono version 1.2.2.1 or later.
Note that Mono currently does not contain full SSL support and 
therefore IceSSL is not supported.

Unpack the archive. The sources will be contained in the IceCS-@ver@
subdirectory.

You will need the Slice to C# translator and supporting executables
and libraries. You can download a binary distribution from the ZeroC
web site, or you can build Ice for C++ yourself.

Binary distributions for the supported platforms are available at

  http://www.zeroc.com/download.html

To build Ice for C#, run

$ make

in the top-level directory.

You need to set (and export) ICE_HOME to the top-level directory of
an Ice for C++ installation. (The makefiles look there for a bin
directory that contains slice2cs.)


Configuring Linux to recognize Mono binaries
--------------------------------------------

Mono binaries are interpreted so, given a binary called "foo", you
have to run the Mono interpreter with an argument "foo" to execute
that binary, like so:

$ mono foo

If you want to avoid having to explicitly invoke the Mono interpreter,
you can run the following commands (as root) to make your kernel
recognize Mono binaries and automatically launch the interpreter.
(Replace /usr/bin/mono with the location of your mono interpreter in
the commands below.)

    if [ ! -e /proc/sys/fs/binfmt_misc/register ]; then
        /sbin/modprobe binfmt_misc 
        mount -t binfmt_misc none /proc/sys/fs/binfmt_misc
    fi 
    if [ -e /proc/sys/fs/binfmt_misc/register ]; then
        echo ':CLR:M::MZ::/usr/bin/mono:' > /proc/sys/fs/binfmt_misc/register
    else
        echo "No binfmt_misc support" exit 1
    fi 

With this change, assuming that the execute bit is set on the binary,
you can execute the binary directly:

$ foo

This does not change your kernel, but the modules that are loaded when
you boot your system, so you will not lose the change if you upgrade
the kernel or Mono.


Running the tests
-----------------

Some of the Ice for C# tests employ applications that are part of the
Ice for C++ distribution. You need to set the ICE_HOME environment
variable to the path where these applications are installed for these
tests to run properly:

$ export ICE_HOME=/opt/Ice-@ver@

You must add IceCS-@ver@/bin to your MONO_PATH. (Don't forget to export
MONO_PATH). Alternatively, you can install the Ice DLLs (from the bin
directory) in the Global Assembly Cache (GAC), using gacutil -i
<name>. For example:

$ gacutil -i icecs.dll

Python is required to run the test suite:

  http://www.python.org/download

To run the tests, open a command window and change to the top-level
directory. At the command prompt, execute:

  > python allTests.py

You can also run tests individually by changing to the test directory
and running this command:

  > python run.py

If everything worked out, you should see lots of "ok" messages. In
case of a failure, the tests abort with "failed".


Running the demos
-----------------

To run the demos, you need to have IceCS-@ver@/bin in your MONO_PATH
(or install the Ice DLLs in the GAC, as for running the tests). See
the README file in each demo directory for a description of each demo.


Installation
------------

On Linux, open config/Make.rules.cs and change the "prefix" variable
to hold the top-level installation directory. This directory will be
created automatically if necessary. Also review the comments for the
"no_gac" variable and decide whether to enable it. Next, run

$ make install

On other platforms, copy the libraries from IceCS-@ver@/bin to the
desired location.

After installation, add the directory containing the libraries to
your MONO_PATH. When building applications, you need to reference
the libraries with the -r option to mcs.

Alternatively, you can add the libraries to the global assembly cache.
To do this, use

$ gacutil -i <path_to_lib.dll>

Once installed in the cache, the assemblies will always be located
correctly without having to set environment variables.

Finally, you could also copy the necessary libraries into the
directory that contains the .exe for your application.


Binary compatibility
--------------------

Patch releases of Ice are binary compatible. For example, version
<x>.<y>.1 is compatible with <x>.<y>.0, so you can run applications
compiled with <x>.<y>.0 with the <x>.<y>.1 runtime without having to
recompile.

A patch release includes policy assemblies in IceCS-@ver@/bin that
supply the Mono run time with the required compatibility information.
To upgrade an existing application to a new patch release, the policy
assemblies must be present in your MONO_PATH, or they must be
installed into the GAC as described in the previous section.
