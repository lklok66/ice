Build instructions
------------------

This version of Ice for C# requires Mono version 1.0.6.

Unpack the Ice archive. The sources will be contained in the 'icecs'
subdirectory.

You must build the slice2cs compiler from the Ice for C++ source
distribution. Make sure that slice2cs is in your PATH or,
alternatively, place the slice2cs executable into the bin directory of
the Ice for C# distribution. You also must ensure that the dynamic
libraries that are required by slice2cs (iceutil and slice) are in
your path. In addition, slice2cs calls icecpp.exe, which must also be
in your path, as must be the Ice for C++ run-time libraries iceutil
and slice.

To build Ice for C#, run

$ make depend; make

in the top-level directory.


Configuring Linux to recognize Mono binaries
--------------------------------------------

Mono binaries are interpreted so, given a binary called "foo", you
have to run the Mono interpreter with an argument "foo" to execute
that binary, like so:

$ mono foo

If you want to avoid having to explictly invoke the Mono interpreter,
you can run the following commands (as root) to make your kernel
recognize Mono binaries and automatically launch the interpreter.
(Replace /opt/mono/bin/mono with the location of your mono interpreter
in the commands below.)

    if [ ! -e /proc/sys/fs/binfmt_misc/register ]; then
	/sbin/modprobe binfmt_misc mount -t binfmt_misc none /proc/sys/fs/binfmt_misc
    fi 
    if [ -e /proc/sys/fs/binfmt_misc/register ]; then
	echo ':CLR:M::MZ::/usr/bin/mono:' > /proc/sys/fs/binfmt_misc/register
    else
	echo "No binfmt_misc support" exit 1
    fi 

With this change, assuming that the execute bit is set on the binary,
you can execute the binary directly:

$ foo

This does not change your kernel, but the modules that are loaded when
you boot your system, so you will not lose the change if you upgrade
the kernel or Mono.


Running the tests
-----------------

You must add icecs/bin to your MONO_PATH. (Don't forget to export
MONO_PATH). Alternatively, you can install the Ice DLLs (from the bin
directory) in the Global Assembly Cache (GAC), using gacutil -i
<name>. For example:

$ gacutil -i icecs.dll

To run the tests, you will need Python:

http://www.python.org/download

Run "python allTests.py" from the icecs directory to run all of the
tests, or "python allTests.py -l" to run the tests in an endless loop.

You can also run individual tests in the various test directories with
"python run.py".

If you have the Mono run time installed under Windows (see
INSTALL.WINDOWS), you can also execute the tests using the Mono run
time (instead of the .NET run time). To do this, add the -m option to
allTests.py or run.py.


Running the demos
-----------------

To run the demos, you need to have icecs/bin in your MONO_PATH (or
install the Ice DLLs in the GAC, as for running the tests).  See the
README file in each demo directory for a description of each demo.


Installation
------------

Put the icecs/bin/icecs.dll file where you want it and add that
directory to your MONO_PATH. When building applications, you need to
reference the library with the -r option to mcs.

Alternatively, you can add icecs.dll to the global assembly cache. To
do this, use

    gacutil -i <path_to_icecs.dll>

Once installed in the cache, the assembly will always be located
correctly without having to set environment variables.

Another option is to copy icecs.dll into the directory that contains
the .exe for your application.


Known issues
------------

On non-Windows platforms, a number of the tests fail, hang, or fail
intermittently. (These tests pass with Mono on Windows.) We are
actively working with the Mono developers to get this fixed.

Please let us know about any bugs, comments, or feedback in the Ice
forum at http://www.zeroc.com/vbulletin/.
