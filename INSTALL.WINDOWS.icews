======================================================================
Overview
======================================================================

This file describes the IceWS source distribution, including
information about compiler requirements, third-party dependencies, and
instructions for building and testing the distribution.

The IceWS distribution includes a modified version of Ice 3.5.1 and
the Ice for WebSocket (IceWS) transport plug-in.

There are three components produced by the build:

* Replacements for the libraries ice35.dll and icessl35.dll
* A new library icews35.dll

In order to use the IceWS transport plug-in, you must also use the
replacement DLLs for Ice and IceSSL instead of the libraries from the
standard Ice 3.5.1 distribution.

If you prefer, you can download a Windows installer that contains the
header files and pre-compiled libraries necessary for using IceWS on
Windows at the link below:

  http://www.zeroc.com/labs/icews/download.html


======================================================================
Requirements
======================================================================

IceWS is expected to build and run properly on Windows versions
supported by Ice 3.5.


Ice and third-party libraries
-----------------------------

IceWS requires Ice 3.5.1 to be installed for the slice2cpp translator.

IceWS has dependencies on the following third-party libraries:

- OpenSSL 0.9.8 or later (OpenSSL 1.0 or later recommended)
- bzip2 1.0

You do not need to build these packages yourself, as ZeroC supplies a
Windows installer that contains release and debug libraries for all of
the third-party dependencies.

If you intend to build the third-party dependencies from source, we
recommend downloading the Ice third-party source archive from

  http://www.zeroc.com/download.html

This archive contains the source distributions for each of the
third-party dependencies, as well as required source patches and
configuration instructions.

For more information about these dependencies, please refer to
the links below:

OpenSSL        http://www.openssl.org
bzip2          http://www.bzip.org


======================================================================
Compilation and Testing
======================================================================


Building Ice
------------

Using your favorite Zip tool, unzip the IceWS source archive anywhere
you like.

Open a command prompt that is configured for your target architecture.
For example, when using Visual Studio 2012, you have several
alternatives:

 - Visual Studio Command Prompt
 - Visual Studio x64 Win64 Command Prompt
 - Visual Studio x64 Cross Tools Command Prompt

Using the first configuration produces 32-bit binaries, while the
second produces 64-bit binaries.

Note that you must be using a Windows x64 platform when compiling a
64-bit version of Ice.

Change the working directory to IceWS-@ver@. For example:

> cd C:\IceWS-@ver@\cpp

Edit config\Make.rules.mak to establish your build configuration. The
comments in the file provide more information.

Now you're ready to build IceWS:

> nmake /f Makefile.mak


Running the Test Suite
----------------------

Python is required to run the test suite:

  http://www.python.org/download

Open a command prompt and change to the top-level IceWS directory.

Add the "bin" directory of the third-party libraries to your PATH.

For x86 builds:

> set PATH=<ThirdPartyHome>\bin;%PATH%

For x64 builds:

> set PATH=<ThirdPartyHome>\bin\x64;%PATH%

You can now run the test suite. At the command prompt, execute:

> python allTests.py --all

If everything worked out, you should see lots of "ok" messages. In
case of a failure, the tests abort with "failed".

If you want to try out any of the demos, make sure to update your PATH
environment variable to add the "bin" directory, which contains the
DLLs and executables.


======================================================================
x64 Platform
======================================================================

Building IceWS on x64 with the Visual Studio 2012 C++ compiler is like
building IceWS on x86. You just need to perform the build in a "Visual
Studio x64 Win64 Command Prompt", and not in a regular "Visual Studio
2012 Command Prompt".

Note that you must be using a Windows x64 platform when compiling a
64-bit version of Ice.


======================================================================
Installation
======================================================================

Simply run "nmake /f Makefile.mak install". This will install IceWS in
the directory specified by the "prefix" variable in
config\Make.rules.mak.

Follow the instructions from the Ice release notes to build and run
your application:

  http://doc.zeroc.com/display/Ice/Release+Notes

To use the IceWS transport, you will need to update your environment
to first look for libraries from the bin directory of your IceWS
installation.

You can set the PATH environment variable:

  > set PATH=<IceWS installation directory>\bin;%PATH%

Or for 64-bit applications:

  > set PATH=<IceWS installation directory>\bin\x64;%PATH%
