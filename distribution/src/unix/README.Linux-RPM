======================================================================
The Internet Communications Engine
======================================================================

Ice is a modern alternative to object middleware such as CORBA or
COM/DCOM/COM+. It is easy to learn, yet provides a powerful network
infrastructure for demanding technical applications. It features an
object-oriented specification language, easy to use C++, .NET, Java,
Python, Ruby, and PHP mappings, a highly efficient protocol,
asynchronous method invocation and dispatch, dynamic transport
plug-ins, TCP/IP and UDP/IP support, SSL-based security, a firewall
solution, and much more.

Ice is available under the terms of the GNU General Public License
(GPL) (see LICENSE file). Commercial licenses are available for
customers who wish to use Ice with proprietary products. Please
contact sales@zeroc.com for more information about licensing Ice.


======================================================================
About this distribution
======================================================================

Ice @ver@ for Linux is distributed in several RPM packages:

- The base Ice RPM contains the Slice files and associated
  documentation.

- The ice-libs RPM contains the C++ run-time libraries.

- The ice-utils RPM contains utilities necessary to administer an Ice
  installation.

- The ice-servers RPM contains all Ice servers, and sample init.d
  scripts.

- For each supported Ice language, C++, Java, Python, Ruby and .NET
  (Mono), we provide an associated run-time library RPM that enables
  you to execute Ice applications developed in that language. In
  addition, a development kit for each language is contained in a
  separate RPM.

These RPMs are available for download at the ZeroC web site at

  http://www.zeroc.com/download.html

Notes:

- Ice for Ruby RPMs are currently available only on Red Hat Enterprise
  Linux.

- Ice for .NET RPMs are currently available only on SuSE Enterprise
  Linux Server.


======================================================================
Setting up your environment to use Ice
======================================================================


C++
---

No additional compiler or linker options are required for an RPM
installation of the Ice for C++ development kit.

On RHEL 4, Ice requires the nptl-devel package, which contains the
function pthread_condattr_setclock. It is necessary to link with
the nptl libpthread when building Ice applications.


Java
----

To use Ice for Java with the Java5 mapping, add Ice.jar to your
CLASSPATH, as shown in the following bash command:

$ export CLASSPATH=/usr/share/java/Ice.jar:$CLASSPATH

To use Ice for Java with the Java2 mapping, modify your CLASSPATH as
follows:

$ export CLASSPATH=/usr/share/java/Ice-java2.jar:$CLASSPATH

Note that the Freeze component of Ice for Java requires Berkeley DB.
Ice.jar and Ice-java2.jar contain manifests that automatically load
the Berkeley DB classes (db-4.6.21.jar), however the JVM requires that
the directory containing the Berkeley DB libraries be listed in
java.library.path, therefore you must add this directory to your
LD_LIBRARY_PATH. Assuming you are using the RPM installation of
Berkeley DB, the bash command is shown below:

$ export LD_LIBRARY_PATH=/usr/lib:$LD_LIBRARY_PATH

On a x86_64 system with a 64-bit JVM, the 64-bit Berkeley DB libraries
are installed in /usr/lib64, so use this setting instead:

$ export LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH

When building a Java application that uses Freeze, you also need
to add the Berkeley DB jar file to your CLASSPATH:

$ export CLASSPATH=/usr/share/java/db-4.6.21.jar:$CLASSPATH

When using the Ice for Java SSL plugin (IceSSL), you may experience
occasional hangs. The most likely reason is that your system's entropy
pool is empty. If you have sufficient system privileges, you can solve
this issue by editing the following file

<java.home>/jre/lib/security/java.security

and changing it to use /dev/urandom instead of /dev/random. If you do
not have permission to modify the security file, you can also use the
command-line option shown below:

$ java -Djava.security.egd=file:/dev/urandom MyClass ...

On Linux systems with IPv6 enabled, you may experience occasional hangs 
the first time an Ice object adapter is activated within a JVM. A 
work-around is to disable IPv6 support by setting the Java property 
java.net.preferIPv4Stack to true. For example:

$ java -Djava.net.preferIPv4Stack=true MyClass ...

For more information on this issue, refer to Sun's bug database:

  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6483406


Python
------

The Ice for Python run-time RPM (ice-python) installs the Ice
extension and its associated Python files into the "site-packages"
directory. The RPM also installs a ".pth" file that enables you to
import the various Ice modules without requiring any additional
configuration.


.NET/Mono
---------

The RPM installation adds the .NET run-time libraries to the global
assembly cache (GAC), so that no changes to your environment are
necessary to locate the assemblies.

The instructions for running the demos assume that you have configured
your kernel to automatically execute the Mono interpreter. "Registering
.exe as non-native binaries" at
http://www.mono-project.com/Guide:Running_Mono_Applications describes
how to configure your kernel.

If you don't want to do this you need to run the executable with
mono. For example,

$ mono server.exe


Ruby
----

The Ice for Ruby run-time RPM (ice-ruby) installs the Ice extension
and its associated Ruby files into the "site_ruby" directory. No
additional configuration is necessary to use Ice in your Ruby programs.


PHP
---

The Ice extension for PHP is loaded automatically when the interpreter
loads the contents of the file /etc/php.d/ice.ini (on Red Hat
Enterprise Linux) or /etc/php5/conf.d/ice.ini (on SuSE Linux
Enterprise Server).  This file contains the line shown below:

extension=IcePHP.so

You can modify this file to include additional configuration 
directives, such as those used by the Ice extension.

At run time, the PHP interpreter requires the Ice shared libraries.

You can verify that the Ice extension is installed properly by 
examining the output of the "php -m" command, or by calling the
phpinfo() function from a script.

On SuSE Linux Enterprise Server 10, you need to install php5 version
5.1.2-29.22 or greater (as long as the greater version maintains
binary compatibility). Note that php5 5.1.2-29.22 is not binary
compatible with the php5 RPM (version 5.1.2-29.5) included in the
original SuSE Linux Enterprise Server 10 distribution.


SELinux Notes (for Red Hat Enterprise Linux users)
--------------------------------------------------

SELinux augments the traditional Unix permissions with a number of
new features. In particular, SELinux can prevent the httpd daemon from
opening network connections and reading files without the proper
SELinux types.

If you suspect that your IcePHP application does not work due to
SELinux restrictions, we recommend that you first try it with SELinux
disabled. As root, run:

# setenforce 0

to disable SELinux until the next reboot of your computer.

If you want to run httpd with IcePHP and SELinux enabled, you must do
the following:

- Allow httpd to open network connections:

  # setsebool httpd_can_network_connect=1 

  (add the -P option to make this setting persistent across reboots)

- Make sure any .ice file used by your PHP scripts can be read by 
  httpd. The enclosing directory also needs to be accessible. For
  example:

  # chcon -R -t httpd_sys_content_t /opt/MyApp/slice 

For more information on SELinux in Red Hat Enterprise Linux 4, refer
to the link below:

  http://www.redhat.com/docs/manuals/enterprise/RHEL-4-Manual/selinux-guide/


======================================================================
/etc/init.d scripts
======================================================================

The ice-servers RPM includes the following sample /etc/init.d scripts 
and associated configuration files:

- /etc/init.d/icegridregistry and /etc/icegridregistry.conf
- /etc/init.d/icegridnode and /etc/icegridnode.conf
- /etc/init.d/glacier2router and /etc/glacier2router.conf

The installation of this RPM also creates a user account and group
for running these services (account ice and group ice), and the
directories for the icegridregistry and icegridnode data
(/var/lib/ice/icegrid/registry and /var/lib/ice/icegrid/node1).

By default, all these services are off at all runlevels. You need
to manually switch on one or more runlevels, for example: 

#
# On a Red Hat Enterprise Linux system, configure the icegridregistry 
# to start at runlevel 3 and 5:
#
chkconfig --level 35 icegridregistry on

#
# On a SuSE Linux Enterprise Server system, configure the 
# icegridregistry to start at runlevel 3 and 5:
#
chkconfig icegridregistry 35


Before doing so, please review the script itself and its associated
configuration file.


======================================================================
Using the IceGrid Administrative Console
======================================================================

A Java-based graphical tool for administering IceGrid applications
is included in this distribution. The Java archive file is installed
as

/usr/share/java/IceGridGUI.jar

With a suitable Java installation, you can execute the application
using the following command:

$ icegridgui

or

$ java -jar IceGridGUI.jar

On SuSE Linux Enterprise Server when using the IBM JRE, the GUI might
warn about not being able to create the system preferences directory.
To get rid of this warning, you can either run the icegridgui once as
root or create the /usr/lib/jre/.systemPrefs directory (this directory
should be world readable).

======================================================================
Demos
======================================================================

Sample programs are provided in the Ice-@ver@-demos.tar.gz package,
which can be downloaded from the ZeroC web site at

  http://www.zeroc.com/download.html

Please refer to the README.DEMOS file included in that package for
more information.


======================================================================
Binary compatibility
======================================================================

Ice patch releases are binary compatible. For example, Ice version 
@mmver@.1 is compatible with @mmver@.0: you can run an application built
against Ice @mmver@.0 with Ice @mmver@.1 (or later) without having to
recompile or relink this application.

Please refer to the RELEASE_NOTES file included in this distribution
for detailed upgrade instructions.
