======================================================================
The Internet Communications Engine
======================================================================


Introduction
------------

Ice is a modern object-oriented toolkit that enables you to build
distributed applications with minimal effort. Ice allows you to focus
your efforts on your application logic while it takes care of all
interactions with low-level network programming interfaces. With Ice,
there is no need to worry about details such as opening network
connections, serializing and deserializing data for network
transmission, or retrying failed connection attempts (to name but a
few of dozens of such low-level details).

In addition to fully-featured and high-performance RPC, Ice also
provides a number of services. These services supply functionality
that most distributed applications require, such as event distribution
or server management.

Ice is available under the terms and conditions of the GNU General
Public License v2 (see the ICE_LICENSE file). Commercial licenses are
available for customers who wish to use Ice in proprietary products.
Please contact sales@zeroc.com for more information on licensing Ice.


Table of Contents
-----------------

  1. About this distribution
  2. Requirements
     - Java
  3. Berkeley DB
  4. Qt
  5. Ice extension for Python
  6. Setting up your environment to use Ice
     - General
     - C++
     - Java
  7. Using the IceGrid Administrative Console
  8. Demos
  9. Binary compatibility


======================================================================
1. About this distribution
======================================================================

This distribution is a binary release of Ice @ver@ for Solaris 10 on
x86/x64 and includes the following components:

- The Ice run time, including executables for the Ice services and
  Slice files.

- Run time libraries for C++ and Java. These libraries enable you to
  execute Ice applications.

- Tools and libraries for developing Ice applications.

This distribution contains executables and libraries in both 32-bit
and 64-bit format. The 32-bit executables are in the bin directory
and the 32-bit libraries are in the lib directory, while the 64-bit
executables are located in bin/amd64 and the 64-bit libraries are in
lib/amd64.


======================================================================
2. Requirements
======================================================================

This binary distribution was compiled on Solaris 10 using GCC 3.4.3.

The following Solaris 10 binary packages are required to use
this distribution:

- bzip2 (Sun package SUNWbzip)
- libexpat (Sun package SUNWlexpt)
- openssl (Sun packages SUNWopenssl-libraries SUNWopenssl-commands)

We also recommend that you install the Solaris 10 Encryption Kit (Sun
packages SUNWcry and SUNWcryr) available at

  http://www.sun.com/download/index.jsp?cat=Security&tab=3&subcat=Cryptography%20%26%20Encryption


Java
----

Ice for Java requires J2SE 1.5.0 or later. Java binary packages can be
obtained from Sun Microsystems at

  http://java.sun.com


======================================================================
3. Berkeley DB
======================================================================

This distribution includes the C++ and Java run time for Berkeley DB
4.8.24. The C++ run time was built using GCC 3.4.3. The Berkeley DB
license is provided in the file THIRD_PARTY_LICENSE.


======================================================================
4. Qt
======================================================================

This distribution includes the QtCore and QtSql libraries. These
libraries were built using GCC 3.4.3. The Qt license is provided in
the file THIRD_PARTY_LICENSE. The QtSql library has the SQLite and
PostreSQL drivers built-in.


======================================================================
5. Ice extension for Python
======================================================================

Ice for Python is fully supported on Solaris. However it is not
included in this distribution because there is no suitable binary
distribution for Python itself available from Sun or
www.sunfreeware.com.

If you want to use Ice for Python on Solaris, you can build a source
distribution available at

  http://www.zeroc.com/download.html


======================================================================
6. Setting up your environment to use Ice
======================================================================


General
-------

In order to use Ice services and tools such as Slice translators, you
need to add the location of the Ice binaries to your PATH as shown in
the bash command below:

$ export PATH=<Ice installation directory>/bin:$PATH

In you want to use the 64-bit version of these services and tools,
add 'bin/amd64' as well, making sure it appears before 'bin' in
your PATH:

$ export PATH=<Ice installation directory>/bin:$PATH
$ export PATH=<Ice installation directory>/bin/amd64:$PATH

Ice shared libraries and executables in this distribution contain
/opt/Ice-@mmver@/lib as the embedded runpath (the runpath for 64-bit
for 64-bit libraries and executables is /opt/Ice-@mmver@/lib/amd64).
In order to run Ice services and tools, you can do one of the
following:

 - Create a symbolic link /opt/Ice-@mmver@ that points to your Ice
   installation:

   $ ln -s <Ice installation directory> /opt/Ice-@mmver@

 - Add the Ice lib directory to your LD_LIBRARY_PATH and
   LD_LIBRARY_PATH_64 environment variables:

   $ export LD_LIBRARY_PATH=<Ice installation directory>/lib:$LD_LIBRARY_PATH

   $ export LD_LIBRARY_PATH_64=<Ice installation directory>/lib/amd64:$LD_LIBRARY_PATH_64


C++
---

When compiling Ice for C++ programs, you must pass the Ice include
directory to the compiler with the -I option, and the Ice library
directory with the -L option. Furthermore, a C++ program needs to link
with at least libIce and libIceUtil, so a typical link command would
look like this:

$ CC -I <Ice installation directory>/include -o myprogram myprogram.o \
  -L<Ice installation directory>/lib -lIce -lIceUtil

Additional libraries are necessary if you are using an Ice service
such as IceGrid or Glacier2.


Java
----

To use Ice for Java, you must add Ice.jar to your CLASSPATH, as shown
below:

$ export CLASSPATH=<Ice installation directory>/lib/Ice.jar:$CLASSPATH

If you intend to use Freeze for Java, you must include Freeze.jar in
your CLASSPATH along with Ice.jar:

$ export CLASSPATH=<Ice installation directory>/lib/Freeze.jar:$CLASSPATH

Note that Freeze requires Berkeley DB. Freeze.jar contains a manifest
that automatically loads the Berkeley DB classes (db.jar), which means
you do not need to include this file in your CLASSPATH when executing
a Freeze application. However the JVM does require that the directory
containing Berkeley DB's native libraries be listed in
java.library.path. Modifying your LD_LIBRARY_PATH (or
LD_LIBRARY_PATH_64, if you use a 64-bit JVM) as described in the
"General" section above satisfies this requirement.

When building a Java application that uses Freeze, you will need to
add the Berkeley DB JAR file to your CLASSPATH:

$ export CLASSPATH=<Ice installation directory>/lib/db.jar:$CLASSPATH

Ice includes ant tasks for translating Slice to Java. The ant tasks
allow slice2java and slice2freezej to be invoked from the ant build
system. These tasks require one of the following:

 - Specify the location of the Ice installation containing the
   translators with the ice.home property:

   ant -Dice.home=/home/bill/Ice-@ver@

 - Set the ICE_HOME environment variable to specify the location of
   the Ice installation containing the translators:

   $ export ICE_HOME=/home/bill/Ice-@ver@

 - If neither ice.home nor ICE_HOME is available, the ant tasks will
   simply invoke the translator without an absolute path, relying on
   the translators being in a directory in your PATH for successful
   execution.

Ice for Java supports protocol compression using the bzip2 classes
included with ant. Compression is automatically enabled if these
classes are present in your CLASSPATH. You can either add ant.jar to
your CLASSPATH, or download only the bzip2 classes from

  http://www.kohsuke.org/bzip2/

Note that these classes are a pure Java implementation of the bzip2
algorithm and therefore add significant latency to Ice requests.


======================================================================
7. Using the IceGrid Administrative Console
======================================================================

A Java-based graphical tool for administering IceGrid applications
is included in this distribution. The Java archive file is installed
as

<Ice installation directory>/lib/IceGridGUI.jar

With a suitable Java installation, you can execute the application
using the following command:

$ java -jar IceGridGUI.jar


======================================================================
8. Demos
======================================================================

Sample programs are provided in the Ice-@ver@-demos.tar.gz package,
which can be downloaded from the ZeroC web site at

  http://www.zeroc.com/download.html

Please refer to the README.DEMOS file included in that package for
more information.


======================================================================
9. Binary compatibility
======================================================================

Please refer to the RELEASE_NOTES file included in this distribution
for information on binary compatibility and detailed upgrade
instructions.
