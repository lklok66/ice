======================================================================
Requirements
======================================================================

Operating system
----------------

Ice Touch requires:

- Mac OS X 10.5.7 or later
- iPod touch v2 using software version 2.2.1, or 3.0
- iPhone 3G using software version 2.2.1 or 3.0

We expect that Ice Touch will build successfully with iPhone SDK 2.0 and
run on iPhone OS 2.0; however, we did not test these versions.


Compiler
--------

To build iPhone applications, you need:

- Xcode 3.1.3
- iPhone SDK for iPhone OS 3.0 (build 9M2736)

To build Cocoa applications, you need:

- Xcode 3.1.2 or later.


======================================================================
Compiling the Demos
======================================================================

All the demos can be found under /Developer/Examples/IceTouch-1.0

To build the command-line demos:

$ cd /Developer/Examples/IceTouch-1.0
$ make

If you are building for Cocoa, you can use Xcode to build
the demos located in the following subdirectories of
/Developer/Examples/IceTouch-1.0/Cocoa

 - chat
 - library

If you are building for iPhone or the iPhone simulator, you can
use Xcode to build the demos located in subdirectories of
/Developer/Examples/IceTouch-1.0/iPhone

  - chat
  - library
  - hello
  - router


======================================================================
Configuring the Xcode plug-in
======================================================================

The Xcode plugin simplifies the process of building Ice and Ice Touch
applications with Xcode.

The Xcode plug-in provides the following features:

  - Handles all aspects of translating your Slice files for both
    Objective-C and C++ projects.
  - Incrementally recompiles Slice files after modifications
  - Maintains dependencies between Slice files
  - Highlights compilation errors in your source code

The Xcode plug-in is configured using the per-target info build
settings, just as you would configure the compiler settings. Select a
target, press info (or Cmd-i), select the build tab, and enter "Slice"
in the "Search in Build Settings" field.

The following fields are defined:

- Header Search Path

   Set the list of directories to search for included Slice files
   (-I option). Note that the Ice Slice files are automatically in the
   header search path.

- Ice Home

  If you are building with the Ice Touch Xcode SDK, this should left
  unset; otherwise, if using the command line toolkit or regular Ice,
  set this to the location of the installation (ie: /opt/Ice-3.3.1, or
  /opt/IceTouch-1.0)

- Permit `Ice' prefix

  Pass --ice to the Slice compiler.

- Streaming support

  Pass --stream to the Slice compiler (C++ only).

- Checksum support

  Pass --checksum to the Slice compiler (C++ only).

- Preprocessor Macros

  Set the list of preprocessor macros to define (-D option).

- Support Ice Touch 0.1.0

  If you are using the plug-in with Ice Touch 0.1.0, set this option,
  otherwise leave it unset.

- Translate C++ code

  If set, slice2cpp will be used to translate the Slice files,
  otherwise slice2objc is used.

You may set specific Slice compiler flags on individual source Slice
files by selecting the Slice file, press info (or Cmd-i), selecting
the build tab and entering any desired flags in "Additional Compiler
Flags for Target".


======================================================================
Release notes for Ice Touch 1.0.0
======================================================================

Table of Contents
-----------------

  1. Introduction
  2. Ice Touch Feature Set
  3. SSL Support
  4. Loggers
  5. Garbage Collection
  6. Auto release pool


======================================================================
1. Introduction
======================================================================

Ice Touch offers an Objective-C language mapping, an Ice run time
for Mac OS X, and an Xcode SDK for Cocoa applications, the iPhone
and the iPod touch.

The Ice Touch distribution does not include any Ice services, but
its support for the complete Ice protocol means that your Ice Touch
applications can work seamlessly with existing Ice servers as well
as Ice services such as IceGrid, Glacier2, and IceStorm.


======================================================================
2. Ice Touch Feature Set
======================================================================

Ice Touch supports the following new features:

  - Objective-C mapping
  - Default servants

These topics are described in the manual.

Ice Touch currently lacks support for the following Ice features:

  - Asynchronous method dispatch (AMD)
  - Collocation optimization
  - Servant locators
  - Implicit contexts
  - Protocol plug-ins
  - Local interfaces
  - Ice.Application and Ice.Service helper classes
  - Ice.Stats interface

Ice Touch has limited support for:

  - SSL

    Refer to Section 3 below for more information.

  - UDP

    On the iPhone, UDP requests do not transparently establish a
    3G/Edge connection.


======================================================================
3. SSL Support
======================================================================

Ice Touch for Mac OS X and Cocoa uses the Ice for C++ SSL
protocol plug-in.

For the iPhone, Ice Touch SSL provides only a subset of this
functionality. Due to limitations in iPhone SSL support, the
following restriction applies:

  - Ice Touch servers cannot authenticate SSL clients.

Furthermore, the semantics of some IceSSL configuration properties
have changed, and new properties have been added. The IceSSL property
reference section of the Ice Touch manual provides complete details.

SSL support is not available for the iPhone Simulator.


======================================================================
4. Loggers
======================================================================

Custom loggers must be installed via ICEInitializationData. You cannot
use any of the Ice for C++ logger properties, such as Ice.UseSyslog,
and you cannot install a custom logger with a plug-in (Ice.Plugin.*).


======================================================================
5. Garbage Collection
======================================================================

For Mac OS X and Cocoa, the Ice Touch run time is built with garbage
collection support.

For the iPhone and iPhone Simulator, since garbage collection is not
supported, you must use explicit retain/release.

Due to the lack of GC, the Ice Touch run time for iPhone and
iPhone Simulator cannot garbage collect graphs of objects containing
cycles. For example,

class Foo
{
    Foo next;
};

Foo a = [[Foo alloc] init];
Foo b = [[Foo alloc] init];
a.next = b;
b.next = a;

If you send this graph over the wire, your application will leak
memory unless you somehow retain the graph and manually break the
cycle.


======================================================================
6. Auto release pool
======================================================================

The Ice run time creates an NSAutoReleasePool object before each
server-side dispatched invocation and client-side AMI callback. The
pool is released once the dispatch is complete.


======================================================================
7. Xcode project settings
======================================================================

For Cocoa and iPhone applications, which use the Xcode SDK, you must
add to "Additional SDKs"

  /Developer/SDKs/IceTouch-1.0/$(PLATFORM_NAME).sdk

In addition, for iPhone applications, when creating a new iPhone Xcode
project, you set the "Code Signing Resource Rules Path" to:

  $(SDKROOT)/ResourceRules.plist

If you do not do this, you will receive an error signing your
application when targeting iPhone 2.2 or later.

You must also add to the Frameworks folder:

 - CFNetwork.framework
 - Security.framework
 - Foundation.framework


For iPhone Simulator applications, the dynamically linked Ice libraries
must be copied into the application directory. For our iPhone demos,
this is done in the Xcode project with a post-build script as follows:

if [ $PLATFORM_NAME = iphonesimulator ]; then
  cp $ADDITIONAL_SDKS/usr/local/lib/*.dylib $BUILT_PRODUCTS_DIR/$CONTENTS_FOLDER_PATH
fi
