// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Version.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

var __ice_HashMap = require("./HashMap");
var __ice_HashUtil = require("./HashUtil");
var __ice_ArrayUtil = require("./ArrayUtil");

var Ice = (function(_mod_Ice, undefined)
{

    /// <summary>
    /// A version structure for the protocol version.
    /// </summary>
    
    _mod_Ice.ProtocolVersion = function(major, minor)
    {
        this.major = major !== undefined ? major : 0;
        this.minor = minor !== undefined ? minor : 0;
    }

    _mod_Ice.ProtocolVersion.prototype.toString = function()
    {
        return "";
    }

    _mod_Ice.ProtocolVersion.prototype.clone = function()
    {
        var __r = new _mod_Ice.ProtocolVersion();
        __r.major = this.major;
        __r.minor = this.minor;
        return __r;
    }

    _mod_Ice.ProtocolVersion.prototype.equals = function(rhs)
    {
        if(this === rhs)
        {
            return true;
        }
        if(!(rhs instanceof _mod_Ice.ProtocolVersion))
        {
            return false;
        }
        if(this.major !== rhs.major)
        {
            return false;
        }
        if(this.minor !== rhs.minor)
        {
            return false;
        }

        return true;
    }

    _mod_Ice.ProtocolVersion.prototype.hashCode = function()
    {
        var __h = 5381;
        __h = __ice_HashUtil.addNumber(__h, this.major);
        __h = __ice_HashUtil.addNumber(__h, this.minor);
        return __h;
    }

    /// <summary>
    /// A version structure for the encoding version.
    /// </summary>
    
    _mod_Ice.EncodingVersion = function(major, minor)
    {
        this.major = major !== undefined ? major : 0;
        this.minor = minor !== undefined ? minor : 0;
    }

    _mod_Ice.EncodingVersion.prototype.toString = function()
    {
        return "";
    }

    _mod_Ice.EncodingVersion.prototype.clone = function()
    {
        var __r = new _mod_Ice.EncodingVersion();
        __r.major = this.major;
        __r.minor = this.minor;
        return __r;
    }

    _mod_Ice.EncodingVersion.prototype.equals = function(rhs)
    {
        if(this === rhs)
        {
            return true;
        }
        if(!(rhs instanceof _mod_Ice.EncodingVersion))
        {
            return false;
        }
        if(this.major !== rhs.major)
        {
            return false;
        }
        if(this.minor !== rhs.minor)
        {
            return false;
        }

        return true;
    }

    _mod_Ice.EncodingVersion.prototype.hashCode = function()
    {
        var __h = 5381;
        __h = __ice_HashUtil.addNumber(__h, this.major);
        __h = __ice_HashUtil.addNumber(__h, this.minor);
        return __h;
    }

    return _mod_Ice;
}(Ice || {}));

module.exports.Ice = Ice;
