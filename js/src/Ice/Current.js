// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Current.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

var __ice_EnumBase = require("./EnumBase");
var __ice_HashMap = require("./HashMap");
var __ice_HashUtil = require("./HashUtil");
var __ice_ArrayUtil = require("./ArrayUtil");

var Ice = (function(_mod_Ice, undefined)
{

    /// <summary>
    /// The OperationMode determines the retry behavior an
    /// invocation in case of a (potentially) recoverable error.
    /// </summary>
    
    _mod_Ice.OperationMode = function(_n, _v)
    {
        __ice_EnumBase.call(this, _n, _v);
    }
    _mod_Ice.OperationMode.prototype = new __ice_EnumBase();
    _mod_Ice.OperationMode.prototype.constructor = _mod_Ice.OperationMode;
    __ice_EnumBase.defineEnum(_mod_Ice.OperationMode, {
        'Normal':0, 'Nonmutating':1, 'Idempotent':2});

    /// <summary>
    /// Information about the current method invocation for servers.
    /// Each
    /// operation on the server has a Current as its implicit final
    /// parameter. Current is mostly used for Ice services. Most
    /// applications ignore this parameter.
    /// </summary>
    
    _mod_Ice.Current = function(adapter, con, id, facet, operation, mode, ctx, requestId, encoding)
    {
        this.adapter = adapter !== undefined ? adapter : null;
        this.con = con !== undefined ? con : null;
        this.id = id !== undefined ? id : null;
        this.facet = facet !== undefined ? facet : null;
        this.operation = operation !== undefined ? operation : null;
        this.mode = mode !== undefined ? mode : _mod_Ice.Normal;
        this.ctx = ctx !== undefined ? ctx : null;
        this.requestId = requestId !== undefined ? requestId : 0;
        this.encoding = encoding !== undefined ? encoding : null;
    }

    _mod_Ice.Current.prototype.toString = function()
    {
        return "";
    }

    _mod_Ice.Current.prototype.clone = function()
    {
        var __r = new _mod_Ice.Current();
        __r.adapter = this.adapter;
        __r.con = this.con;
        __r.id = this.id;
        __r.facet = this.facet;
        __r.operation = this.operation;
        __r.mode = this.mode;
        if(this.ctx !== undefined && this.ctx !== null)
        {
            __r.ctx = this.ctx.clone();
        }
        else
        {
            __r.ctx = this.ctx;
        }
        __r.requestId = this.requestId;
        __r.encoding = this.encoding;
        return __r;
    }

    _mod_Ice.Current.prototype.equals = function(rhs)
    {
        if(this === rhs)
        {
            return true;
        }
        if(!(rhs instanceof _mod_Ice.Current))
        {
            return false;
        }
        if(this.adapter !== rhs.adapter)
        {
            return false;
        }
        if(this.con !== rhs.con)
        {
            return false;
        }
        if(this.id !== rhs.id && !this.id.equals(rhs.id))
        {
            return false;
        }
        if(this.facet !== rhs.facet)
        {
            return false;
        }
        if(this.operation !== rhs.operation)
        {
            return false;
        }
        if(this.mode !== rhs.mode && !this.mode.equals(rhs.mode))
        {
            return false;
        }
        if(this.ctx !== rhs.ctx && !this.ctx.equals(rhs.ctx))
        {
            return false;
        }
        if(this.requestId !== rhs.requestId)
        {
            return false;
        }
        if(this.encoding !== rhs.encoding && !this.encoding.equals(rhs.encoding))
        {
            return false;
        }

        return true;
    }

    _mod_Ice.Current.prototype.hashCode = function()
    {
        var __h = 5381;
        __h = __ice_HashUtil.addHashable(__h, this.id);
        __h = __ice_HashUtil.addString(__h, this.facet);
        __h = __ice_HashUtil.addString(__h, this.operation);
        __h = __ice_HashUtil.addHashable(__h, this.mode);
        __h = __ice_HashUtil.addHashable(__h, this.ctx);
        __h = __ice_HashUtil.addNumber(__h, this.requestId);
        __h = __ice_HashUtil.addHashable(__h, this.encoding);
        return __h;
    }

    return _mod_Ice;
}(Ice || {}));

module.exports.Ice = Ice;
