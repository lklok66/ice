// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Identity.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

var __ice_HashMap = require("./HashMap");
var __ice_HashUtil = require("./HashUtil");
var __ice_ArrayUtil = require("./ArrayUtil");

var Ice = (function(_mod_Ice, undefined)
{

    /// <summary>
    /// The identity of an Ice object.
    /// In a proxy, an empty Identity.name denotes a nil
    /// proxy. An identity with an empty Identity.name and a non-empty Identity.category
    /// is illegal. You cannot add a servant with an empty name to the Active Servant Map.
    /// 
    /// </summary>
    
    _mod_Ice.Identity = function(name, category)
    {
        this.name = name !== undefined ? name : null;
        this.category = category !== undefined ? category : null;
    }

    _mod_Ice.Identity.prototype.toString = function()
    {
        return "";
    }

    _mod_Ice.Identity.prototype.clone = function()
    {
        var __r = new _mod_Ice.Identity();
        __r.name = this.name;
        __r.category = this.category;
        return __r;
    }

    _mod_Ice.Identity.prototype.equals = function(rhs)
    {
        if(this === rhs)
        {
            return true;
        }
        if(!(rhs instanceof _mod_Ice.Identity))
        {
            return false;
        }
        if(this.name !== rhs.name)
        {
            return false;
        }
        if(this.category !== rhs.category)
        {
            return false;
        }

        return true;
    }

    _mod_Ice.Identity.prototype.hashCode = function()
    {
        var __h = 5381;
        __h = __ice_HashUtil.addString(__h, this.name);
        __h = __ice_HashUtil.addString(__h, this.category);
        return __h;
    }

    return _mod_Ice;
}(Ice || {}));

module.exports.Ice = Ice;
