// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

var __ice_Object = require("./Object");
var __ice_ObjectPrx = require("./ObjectPrx");
var __ice_Ex = require("./Exception");
var __ice_UserException = __ice_Ex.UserException;
var __ice_HashMap = require("./HashMap");
var __ice_HashUtil = require("./HashUtil");
var __ice_ArrayUtil = require("./ArrayUtil");

var Ice = (function(_mod_Ice, undefined)
{

    /// <summary>
    /// This exception is raised if an adapter cannot be found.
    /// </summary>
    
    _mod_Ice.AdapterNotFoundException = function(_cause)
    {
        __ice_UserException.call(this, _cause);
    }
    _mod_Ice.AdapterNotFoundException.prototype = new __ice_UserException();
    _mod_Ice.AdapterNotFoundException.prototype.constructor = _mod_Ice.AdapterNotFoundException;

    _mod_Ice.AdapterNotFoundException.prototype.ice_name = function()
    {
        return "Ice::AdapterNotFoundException";
    }

    _mod_Ice.AdapterNotFoundException.prototype.toString = function()
    {
        return this.ice_name();
    }

    /// <summary>
    /// This exception is raised if the replica group provided by the
    /// server is invalid.
    /// </summary>
    
    _mod_Ice.InvalidReplicaGroupIdException = function(_cause)
    {
        __ice_UserException.call(this, _cause);
    }
    _mod_Ice.InvalidReplicaGroupIdException.prototype = new __ice_UserException();
    _mod_Ice.InvalidReplicaGroupIdException.prototype.constructor = _mod_Ice.InvalidReplicaGroupIdException;

    _mod_Ice.InvalidReplicaGroupIdException.prototype.ice_name = function()
    {
        return "Ice::InvalidReplicaGroupIdException";
    }

    _mod_Ice.InvalidReplicaGroupIdException.prototype.toString = function()
    {
        return this.ice_name();
    }

    /// <summary>
    /// This exception is raised if a server tries to set endpoints for
    /// an adapter that is already active.
    /// </summary>
    
    _mod_Ice.AdapterAlreadyActiveException = function(_cause)
    {
        __ice_UserException.call(this, _cause);
    }
    _mod_Ice.AdapterAlreadyActiveException.prototype = new __ice_UserException();
    _mod_Ice.AdapterAlreadyActiveException.prototype.constructor = _mod_Ice.AdapterAlreadyActiveException;

    _mod_Ice.AdapterAlreadyActiveException.prototype.ice_name = function()
    {
        return "Ice::AdapterAlreadyActiveException";
    }

    _mod_Ice.AdapterAlreadyActiveException.prototype.toString = function()
    {
        return this.ice_name();
    }

    /// <summary>
    /// This exception is raised if an object cannot be found.
    /// </summary>
    
    _mod_Ice.ObjectNotFoundException = function(_cause)
    {
        __ice_UserException.call(this, _cause);
    }
    _mod_Ice.ObjectNotFoundException.prototype = new __ice_UserException();
    _mod_Ice.ObjectNotFoundException.prototype.constructor = _mod_Ice.ObjectNotFoundException;

    _mod_Ice.ObjectNotFoundException.prototype.ice_name = function()
    {
        return "Ice::ObjectNotFoundException";
    }

    _mod_Ice.ObjectNotFoundException.prototype.toString = function()
    {
        return this.ice_name();
    }

    /// <summary>
    /// This exception is raised if a server cannot be found.
    /// </summary>
    
    _mod_Ice.ServerNotFoundException = function(_cause)
    {
        __ice_UserException.call(this, _cause);
    }
    _mod_Ice.ServerNotFoundException.prototype = new __ice_UserException();
    _mod_Ice.ServerNotFoundException.prototype.constructor = _mod_Ice.ServerNotFoundException;

    _mod_Ice.ServerNotFoundException.prototype.ice_name = function()
    {
        return "Ice::ServerNotFoundException";
    }

    _mod_Ice.ServerNotFoundException.prototype.toString = function()
    {
        return this.ice_name();
    }

    _mod_Ice.LocatorPrx = function()
    {
        __ice_ObjectPrx.call(this);
    }
    _mod_Ice.LocatorPrx.prototype = new __ice_ObjectPrx();
    _mod_Ice.LocatorPrx.prototype.constructor = _mod_Ice.LocatorPrx;
    _mod_Ice.LocatorPrx.checkedCast = function(__prx, __facet, __ctx)
    {
    }
    _mod_Ice.LocatorPrx.uncheckedCast = function(__prx, __facet)
    {
    }

    /// <summary>
    /// The Ice locator interface.
    /// This interface is used by clients to
    /// lookup adapters and objects. It is also used by servers to get the
    /// locator registry proxy.
    /// 
    /// The Locator interface is intended to be used by
    /// Ice internals and by locator implementations. Regular user code
    /// should not attempt to use any functionality of this interface
    /// directly.
    /// </summary>
    
    _mod_Ice.Locator = function()
    {
        __ice_Object.call(this);
    }
    _mod_Ice.Locator.prototype = new __ice_Object();
    _mod_Ice.Locator.prototype.constructor = _mod_Ice.Locator;
    _mod_Ice.Locator.__ids = [
        "::Ice::Locator",
        "::Ice::Object"
    ];
    _mod_Ice.Locator.prototype.ice_ids = function(current)
    {
        return _mod_Ice.Locator.__ids;
    }

    _mod_Ice.Locator.ice_staticId = function()
    {
        return _mod_Ice.Locator.__ids[0];
    }
    _mod_Ice.Locator.prototype.findObjectById = __ice_Object.prototype.__notImplemented;
    _mod_Ice.Locator.prototype.findAdapterById = __ice_Object.prototype.__notImplemented;
    _mod_Ice.Locator.prototype.getRegistry = __ice_Object.prototype.__notImplemented;

    _mod_Ice.Locator.prototype.toString = function()
    {
        return "[object Ice::Locator]";
    }

    _mod_Ice.LocatorPrx.prototype.findObjectById = function(id, __ctx)
    {
    }

    _mod_Ice.LocatorPrx.prototype.findAdapterById = function(id, __ctx)
    {
    }

    _mod_Ice.LocatorPrx.prototype.getRegistry = function(__ctx)
    {
    }

    _mod_Ice.LocatorRegistryPrx = function()
    {
        __ice_ObjectPrx.call(this);
    }
    _mod_Ice.LocatorRegistryPrx.prototype = new __ice_ObjectPrx();
    _mod_Ice.LocatorRegistryPrx.prototype.constructor = _mod_Ice.LocatorRegistryPrx;
    _mod_Ice.LocatorRegistryPrx.checkedCast = function(__prx, __facet, __ctx)
    {
    }
    _mod_Ice.LocatorRegistryPrx.uncheckedCast = function(__prx, __facet)
    {
    }

    /// <summary>
    /// The Ice locator registry interface.
    /// This interface is used by
    /// servers to register adapter endpoints with the locator.
    /// 
    ///  The LocatorRegistry interface is intended to be used
    /// by Ice internals and by locator implementations. Regular user
    /// code should not attempt to use any functionality of this interface
    /// directly.
    /// </summary>
    
    _mod_Ice.LocatorRegistry = function()
    {
        __ice_Object.call(this);
    }
    _mod_Ice.LocatorRegistry.prototype = new __ice_Object();
    _mod_Ice.LocatorRegistry.prototype.constructor = _mod_Ice.LocatorRegistry;
    _mod_Ice.LocatorRegistry.__ids = [
        "::Ice::LocatorRegistry",
        "::Ice::Object"
    ];
    _mod_Ice.LocatorRegistry.prototype.ice_ids = function(current)
    {
        return _mod_Ice.LocatorRegistry.__ids;
    }

    _mod_Ice.LocatorRegistry.ice_staticId = function()
    {
        return _mod_Ice.LocatorRegistry.__ids[0];
    }
    _mod_Ice.LocatorRegistry.prototype.setAdapterDirectProxy = __ice_Object.prototype.__notImplemented;
    _mod_Ice.LocatorRegistry.prototype.setReplicatedAdapterDirectProxy = __ice_Object.prototype.__notImplemented;
    _mod_Ice.LocatorRegistry.prototype.setServerProcessProxy = __ice_Object.prototype.__notImplemented;

    _mod_Ice.LocatorRegistry.prototype.toString = function()
    {
        return "[object Ice::LocatorRegistry]";
    }

    _mod_Ice.LocatorRegistryPrx.prototype.setAdapterDirectProxy = function(id, proxy, __ctx)
    {
    }

    _mod_Ice.LocatorRegistryPrx.prototype.setReplicatedAdapterDirectProxy = function(adapterId, replicaGroupId, p, __ctx)
    {
    }

    _mod_Ice.LocatorRegistryPrx.prototype.setServerProcessProxy = function(id, proxy, __ctx)
    {
    }

    return _mod_Ice;
}(Ice || {}));

module.exports.Ice = Ice;
