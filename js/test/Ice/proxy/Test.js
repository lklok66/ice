// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, name)
{
    var __m = function(module, exports, require)
    {
        var _merge = require("Ice/Util").merge;
        
        var Ice = module.exports.Ice || {};
        _merge(Ice, require("Ice/Object").Ice);
        _merge(Ice, require("Ice/ObjectPrx").Ice);
        _merge(Ice, require("Ice/TypeRegistry").Ice);
        _merge(Ice, require("Ice/HashMap").Ice);
        _merge(Ice, require("Ice/HashUtil").Ice);
        _merge(Ice, require("Ice/ArrayUtil").Ice);
        _merge(Ice, require("Ice/StreamHelpers").Ice);
        _merge(Ice, require("Ice/Current").Ice);
        
        var Test = module.exports.Test ||  {};

        Test.MyClassPrx = function()
        {
            Ice.ObjectPrx.call(this);
        };
        Test.MyClassPrx.prototype = new Ice.ObjectPrx();
        Test.MyClassPrx.prototype.constructor = Test.MyClassPrx;
        Test.MyClassPrx.checkedCast = function(__prx, __facet, __ctx)
        {
            return Ice.ObjectPrx.checkedCastImpl(Test.MyClassPrx, Test.MyClass.ice_staticId(), __prx, __facet, __ctx);
        };
        Test.MyClassPrx.uncheckedCast = function(__prx, __facet)
        {
            return Ice.ObjectPrx.uncheckedCastImpl(Test.MyClassPrx, __prx, __facet);
        };

        Test.MyClass = function()
        {
            Ice.Object.call(this);
        };
        Test.MyClass.prototype = new Ice.Object();
        Test.MyClass.prototype.constructor = Test.MyClass;
        Test.MyClass.__ids = [
            "::Ice::Object",
            "::Test::MyClass"
        ];
        Test.MyClass.prototype.ice_ids = function(current)
        {
            return Test.MyClass.__ids;
        };

        Test.MyClass.ice_staticId = function()
        {
            return Test.MyClass.__ids[1];
        };
        Test.MyClass.prototype.shutdown = Ice.Object.prototype.__notImplemented;
        Test.MyClass.prototype.getContext = Ice.Object.prototype.__notImplemented;

        Test.MyClass.prototype.toString = function()
        {
            return "[object Test::MyClass]";
        };

        Test.MyClass.prototype.__writeImpl = function(__os)
        {
            __os.startWriteSlice(Test.MyClass.ice_staticId(), -1, true);
            __os.endWriteSlice();
        };

        Test.MyClass.prototype.__readImpl = function(__is)
        {
            __is.startReadSlice();
            __is.endReadSlice();
        };

        Test.MyClassPrx.__op_shutdown = function(__p, __ctx)
        {
            return Ice.ObjectPrx.__invokeNoArgs(__p, "shutdown", false, null, 0, __ctx);
        };

        Test.MyClassPrx.__op_getContext = function(__p, __ctx)
        {
            return Ice.ObjectPrx.__invokeNoArgs(__p, "getContext", true, Test.MyClassPrx.__getContext_completed, 0, __ctx);
        };

        Test.MyClassPrx.__getContext_completed = function(__r)
        {
            if(!Ice.ObjectPrx.__check(__r))
            {
                return;
            }
            var __is = __r.__startReadParams();
            var __ret;
            try
            {
                __ret = Ice.ContextHelper.read(__is);
                __r.__endReadParams();
            }
            catch(__ex)
            {
                Ice.ObjectPrx.__dispatchLocalException(__r, __ex);
                return;
            }
            __r.succeed(__r, __ret);
        };

        Test.MyClassPrx.prototype.getContext = function(__ctx)
        {
            return Test.MyClassPrx.__op_getContext(this, __ctx);
        };

        Test.MyClassPrx.prototype.shutdown = function(__ctx)
        {
            return Test.MyClassPrx.__op_shutdown(this, __ctx);
        };
        
        Ice.ClassRegistry.register(Test.MyClass.ice_staticId(), Test.MyClass);
        

        Test.MyDerivedClassPrx = function()
        {
            Test.MyClassPrx.call(this);
        };
        Test.MyDerivedClassPrx.prototype = new Test.MyClassPrx();
        Test.MyDerivedClassPrx.prototype.constructor = Test.MyDerivedClassPrx;
        Test.MyDerivedClassPrx.checkedCast = function(__prx, __facet, __ctx)
        {
            return Ice.ObjectPrx.checkedCastImpl(Test.MyDerivedClassPrx, Test.MyDerivedClass.ice_staticId(), __prx, __facet, __ctx);
        };
        Test.MyDerivedClassPrx.uncheckedCast = function(__prx, __facet)
        {
            return Ice.ObjectPrx.uncheckedCastImpl(Test.MyDerivedClassPrx, __prx, __facet);
        };

        Test.MyDerivedClass = function()
        {
            Test.MyClass.call(this);
        };
        Test.MyDerivedClass.prototype = new Test.MyClass();
        Test.MyDerivedClass.prototype.constructor = Test.MyDerivedClass;
        Test.MyDerivedClass.__ids = [
            "::Ice::Object",
            "::Test::MyClass",
            "::Test::MyDerivedClass"
        ];
        Test.MyDerivedClass.prototype.ice_ids = function(current)
        {
            return Test.MyDerivedClass.__ids;
        };

        Test.MyDerivedClass.ice_staticId = function()
        {
            return Test.MyDerivedClass.__ids[2];
        };
        Test.MyDerivedClass.prototype.echo = Ice.Object.prototype.__notImplemented;

        Test.MyDerivedClass.prototype.toString = function()
        {
            return "[object Test::MyDerivedClass]";
        };

        Test.MyDerivedClass.prototype.__writeImpl = function(__os)
        {
            __os.startWriteSlice(Test.MyDerivedClass.ice_staticId(), -1, false);
            __os.endWriteSlice();
            Test.MyClass.prototype.__writeImpl.call(this, __os);
        };

        Test.MyDerivedClass.prototype.__readImpl = function(__is)
        {
            __is.startReadSlice();
            __is.endReadSlice();
            Test.MyClass.prototype.__readImpl.call(this, __is);
        };

        Test.MyDerivedClassPrx.__op_echo = function(__p, obj, __ctx)
        {
            return Ice.ObjectPrx.__invoke(__p, "echo", true, Ice.ObjectPrx.__completed_ObjectPrx, 0, 0, __ctx, function(__os)
            {
                __os.writeProxy(obj);
            });
        };

        Test.MyDerivedClassPrx.prototype.getContext = function(__ctx)
        {
            return Test.MyClassPrx.__op_getContext(this, __ctx);
        };

        Test.MyDerivedClassPrx.prototype.shutdown = function(__ctx)
        {
            return Test.MyClassPrx.__op_shutdown(this, __ctx);
        };

        Test.MyDerivedClassPrx.prototype.echo = function(obj, __ctx)
        {
            return Test.MyDerivedClassPrx.__op_echo(this, obj, __ctx);
        };
        
        Ice.ClassRegistry.register(Test.MyDerivedClass.ice_staticId(), Test.MyDerivedClass);
        
        exports.Test = exports.Test || {};
        exports.Test.MyClass = Test.MyClass;
        exports.Test.MyClassPrx = Test.MyClassPrx;
        exports.Test.MyDerivedClass = Test.MyDerivedClass;
        exports.Test.MyDerivedClassPrx = Test.MyDerivedClassPrx;
    };
    return (module === undefined) ? this.Ice.__defineModule(__m, name) : __m(module, module.exports, module.require);
}
(typeof module !== "undefined" ? module : undefined, "Test"));
