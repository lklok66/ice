// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, name)
{
    var __m = function(global, module, exports, require)
    {
        require("Ice/Object");
        require("Ice/ObjectPrx");
        require("Ice/EnumBase");
        require("Ice/TypeRegistry");
        require("Ice/HashMap");
        require("Ice/HashUtil");
        require("Ice/ArrayUtil");
        require("Ice/StreamHelpers");
        
        var Ice = global.Ice || {};
        var Test = global.Test ||  {};

        Object.defineProperty(Test, 'ByteConst1', {
            value: 10
        });

        Object.defineProperty(Test, 'ShortConst1', {
            value: 20
        });

        Object.defineProperty(Test, 'IntConst1', {
            value: 30
        });

        Object.defineProperty(Test, 'LongConst1', {
            value: 40
        });

        Object.defineProperty(Test, 'ByteConst2', {
            value: 126
        });

        Object.defineProperty(Test, 'ShortConst2', {
            value: 32766
        });

        Object.defineProperty(Test, 'IntConst2', {
            value: 2147483647
        });

        Object.defineProperty(Test, 'LongConst2', {
            value: 2147483646
        });

        Test.ByteEnum = function(_n, _v)
        {
            Ice.EnumBase.call(this, _n, _v);
        };
        Test.ByteEnum.prototype = new Ice.EnumBase();
        Test.ByteEnum.prototype.constructor = Test.ByteEnum;
        Ice.EnumBase.defineEnum(Test.ByteEnum, {
            'benum1':0, 'benum2':1, 'benum3':10, 'benum4':11, 'benum5':20,
            'benum6':21, 'benum7':30, 'benum8':31, 'benum9':40, 'benum10':41,
            'benum11':126});

        Test.ShortEnum = function(_n, _v)
        {
            Ice.EnumBase.call(this, _n, _v);
        };
        Test.ShortEnum.prototype = new Ice.EnumBase();
        Test.ShortEnum.prototype.constructor = Test.ShortEnum;
        Ice.EnumBase.defineEnum(Test.ShortEnum, {
            'senum1':3, 'senum2':4, 'senum3':10, 'senum4':11, 'senum5':20,
            'senum6':21, 'senum7':30, 'senum8':31, 'senum9':40, 'senum10':41,
            'senum11':32766});

        Test.IntEnum = function(_n, _v)
        {
            Ice.EnumBase.call(this, _n, _v);
        };
        Test.IntEnum.prototype = new Ice.EnumBase();
        Test.IntEnum.prototype.constructor = Test.IntEnum;
        Ice.EnumBase.defineEnum(Test.IntEnum, {
            'ienum1':0, 'ienum2':1, 'ienum3':10, 'ienum4':11, 'ienum5':20,
            'ienum6':21, 'ienum7':30, 'ienum8':31, 'ienum9':40, 'ienum10':41,
            'ienum11':2147483647, 'ienum12':2147483646});

        Test.SimpleEnum = function(_n, _v)
        {
            Ice.EnumBase.call(this, _n, _v);
        };
        Test.SimpleEnum.prototype = new Ice.EnumBase();
        Test.SimpleEnum.prototype.constructor = Test.SimpleEnum;
        Ice.EnumBase.defineEnum(Test.SimpleEnum, {
            'red':0, 'green':1, 'blue':2});
        Test.TestIntfPrx = Ice.ObjectPrx.defineProxy("Test.TestIntfPrx");
        Test.TestIntfPrx.prototype = new Ice.ObjectPrx();
        Test.TestIntfPrx.prototype.constructor = Test.TestIntfPrx;
        Test.TestIntfPrx.uncheckedCast = function(__prx, __facet)
        {
            return Ice.ObjectPrx.uncheckedCastImpl(Test.TestIntfPrx, __prx, __facet);
        };

        Test.TestIntf = function()
        {
            Ice.Object.call(this);
        };
        Test.TestIntf.prototype = new Ice.Object();
        Test.TestIntf.prototype.constructor = Test.TestIntf;
        Test.TestIntf.__ids = [
            "::Ice::Object",
            "::Test::TestIntf"
        ];
        Test.TestIntf.prototype.ice_ids = function(current)
        {
            return Test.TestIntf.__ids;
        };
        Test.TestIntf.prototype.ice_id = function(current)
        {
            return Test.TestIntf.__ids[1];
        };

        Test.TestIntf.ice_staticId = function()
        {
            return Test.TestIntf.__ids[1];
        };
        Test.TestIntfPrx.ice_staticId = Test.TestIntf.ice_staticId;
        Test.TestIntf.prototype.opByte = Ice.Object.prototype.__notImplemented;
        Test.TestIntf.prototype.opShort = Ice.Object.prototype.__notImplemented;
        Test.TestIntf.prototype.opInt = Ice.Object.prototype.__notImplemented;
        Test.TestIntf.prototype.opSimple = Ice.Object.prototype.__notImplemented;
        Test.TestIntf.prototype.shutdown = Ice.Object.prototype.__notImplemented;

        Test.TestIntf.prototype.toString = function()
        {
            return "[object Test::TestIntf]";
        };

        Test.TestIntf.prototype.__writeImpl = function(__os)
        {
            __os.startWriteSlice(Test.TestIntf.ice_staticId(), -1, true);
            __os.endWriteSlice();
        };

        Test.TestIntf.prototype.__readImpl = function(__is)
        {
            __is.startReadSlice();
            __is.endReadSlice();
        };

        Test.TestIntfPrx.prototype.opByte = function(b1, __ctx)
        {
            return Ice.ObjectPrx.__invoke(this, "opByte", 0, 0, __ctx,
                function(__os)
                {
                    __os.writeEnum(b1);
                },
                function(__is, __results)
                {
                    var __ret;
                    var b2;
                    b2 = __is.readEnum(Test.ByteEnum);
                    __ret = __is.readEnum(Test.ByteEnum);
                    __results.push(__ret, b2);
                }, null);
        };

        Test.TestIntfPrx.prototype.opShort = function(s1, __ctx)
        {
            return Ice.ObjectPrx.__invoke(this, "opShort", 0, 0, __ctx,
                function(__os)
                {
                    __os.writeEnum(s1);
                },
                function(__is, __results)
                {
                    var __ret;
                    var s2;
                    s2 = __is.readEnum(Test.ShortEnum);
                    __ret = __is.readEnum(Test.ShortEnum);
                    __results.push(__ret, s2);
                }, null);
        };

        Test.TestIntfPrx.prototype.opInt = function(i1, __ctx)
        {
            return Ice.ObjectPrx.__invoke(this, "opInt", 0, 0, __ctx,
                function(__os)
                {
                    __os.writeEnum(i1);
                },
                function(__is, __results)
                {
                    var __ret;
                    var i2;
                    i2 = __is.readEnum(Test.IntEnum);
                    __ret = __is.readEnum(Test.IntEnum);
                    __results.push(__ret, i2);
                }, null);
        };

        Test.TestIntfPrx.prototype.opSimple = function(s1, __ctx)
        {
            return Ice.ObjectPrx.__invoke(this, "opSimple", 0, 0, __ctx,
                function(__os)
                {
                    __os.writeEnum(s1);
                },
                function(__is, __results)
                {
                    var __ret;
                    var s2;
                    s2 = __is.readEnum(Test.SimpleEnum);
                    __ret = __is.readEnum(Test.SimpleEnum);
                    __results.push(__ret, s2);
                }, null);
        };

        Test.TestIntfPrx.prototype.shutdown = function(__ctx)
        {
            return Ice.ObjectPrx.__invoke(this, "shutdown", 0, 0, __ctx, null, null, null);
        };
        global.Test = Test;
    };
    return (module === undefined) ? this.Ice.__defineModule(__m, name) : 
        __m(global, module, module.exports, module.require);
}
(typeof module !== "undefined" ? module : undefined, "Test"));
