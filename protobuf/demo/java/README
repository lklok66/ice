Introduction
------------

This demo shows how to integrate Google Protocol Buffers with Ice.

The Protocol Buffers distribution and documentation can be found at

  http://code.google.com/apis/protocolbuffers/

This demo was tested with Protocol Buffers version 2.4.0.

We have added new metadata that makes it possible for you to specify
protocol buffers message types in your Slice definitions, with Ice
handling the serialization chores for you automatically. The metadata,
which may only be used on a sequence<byte> type, has the following
syntax in Java:

  java:protobuf:protoc-generated-class

For example:

  ["java:protobuf:tutorial.PersonPB.Person"] sequence<byte> Person;

The type name specified in this example, tutorial.PersonPB.Person,
corresponds to the Java class generated by the Protocol Buffers
compiler (protoc) for the definition shown below:

  package tutorial;
  option java_outer_classname = "PersonPB";
  message Person { ... };


Building the demo
-----------------

This demo uses an ant build task, located in the "ant" subdirectory,
for compiling .proto files.

Building the demo requires Ant 1.7.0 or greater, which can be
downloaded at:

  http://ant.apache.org/bindownload.cgi

If you are using a non-RPM install on Unix or have not installed Ice
in the default location (/opt/Ice-VERSION on Unix or C:\Ice-VERSION on
Windows) then you will need to set the environment variable ICE_HOME
to point to the root directory of your Ice installation. For example,
on Unix:

  $ export ICE_HOME=<Ice installation root directory>

Or on Windows:

  $ set ICE_HOME=<Ice installation root directory>

Prior to building the demo, you should also add protoc to your PATH
and protobuf-java-2.4.0.jar to your CLASSPATH.

Use this command to build the demo:

  $ ant


Running the demo
----------------

First you must ensure that your environment is set up to run Ice
applications. Please see the documentation that came with your Ice
distribution for more information. You will also need to add the 
classes directory to your CLASSPATH.

Unix:

  $ export CLASSPATH=$CLASSPATH:classes 

Windows:

  $ set CLASSPATH=%CLASSPATH%;classes

To run the demo, first start the server:

  $ java Server

In a separate window, start the client:

  $ java Client
