======================================================================
Contents
======================================================================

Table of Contents
-----------------

  1. Introduction
  2. Requirements
  3. Installation
  4. Eclipse Development
  5. Sample Projects
  6. Application Notes


======================================================================
1. Introduction
======================================================================

This Ice for Android distribution contains the following components:

 * Ice for Android run time (android/lib/Ice.jar)
 * Eclipse projects for three sample clients
   * Chat (android/demo/chat)
   * Hello (android/demo/hello)
   * Library (android/demo/library)
 * Eclipse project for a test suite (android/testsuite)
 * Source patches for Ice 3.4.1 (android/patch.txt)

We encourage you to review the RELEASE_NOTES file for important
information about this release. If you are interested in building Ice
for Android from source, please consult the INSTALL file.


======================================================================
2. Requirements
======================================================================

You must install Ice 3.4.1 to use Ice for Android. Binary and source
distributions of Ice can be downloaded at the link below:

  http://www.zeroc.com/download.html

Ice for Android also requires the Android SDK, which is available at
the following link:

  http://developer.android.com

Ice for Android supports Android 2.1 or later. The IceSSL plug-in is
supported on Android 2.2 or later (see the release notes for more
information on SSL).


======================================================================
3. Installation
======================================================================

You can extract this distribution in the location of your choice. The
only file in this distribution that is necessary for developing your
own Android applications is the Ice for Android run time JAR file
(android/lib/Ice.jar), which you may wish to copy to another
directory. This JAR file contains the Ice for Java 3.4.1 classes with
patches applied to work around some Android discrepancies. This
version of Ice.jar is fully compatible with Ice 3.4.1 and can be used
as a replacement for the one in a standard Ice 3.4.1 distribution.


======================================================================
4. Eclipse Development
======================================================================

This section discusses Ice for Android development using Eclipse. If
you are not using Eclipse to develop your Android application, you may
find the information in the INSTALL file useful.


Slice2Java Plug-in
------------------

ZeroC has created a Slice2Java plug-in for Eclipse that automates the
translation of your Slice files. We strongly recommend using this
plug-in for your own development, and the plug-in is required if you
intend to build any of the Eclipse projects included in this
distribution.

For more information on installing and using the plug-in, please refer
to the link below:

  http://www.zeroc.com/eclipse.html

The instructions in this file assume that you have already installed
and configured the Slice2Java plug-in.


Configuring your Project
------------------------

After installing and configuring the Slice2Java plug-in, you will need
to add the Ice for Android run time JAR file to your project. The
instructions below assume that you have replaced the standard Ice
3.4.1 Ice.jar file with the one in this distribution:

 1. Select Java Build Path in the project's properties
 2. Click on the Libraries tab
 3. Click Add Variable...
 4. Select ICE_HOME and click Extend...
 5. Open the lib subdirectory and select Ice.jar
 6. Click OK to save your changes

The Slice2Java plug-in automatically creates the ICE_HOME classpath
variable, which always refers to the Ice installation directory that
you configured in the Eclipse Preferences dialog. If you installed the
Ice for Android run time JAR file in a different location, you will
need to add it to your project as an external JAR file.


======================================================================
5. Sample Projects
======================================================================

The following prerequisites are necessary for using the sample
projects in this distribution:

 1. Eclipse is installed

    See http://www.eclipse.org

 2. Android ADT is installed and configured

    See http://developer.android.com/sdk/eclipse-adt.html#installing

 3. Ice 3.4.1 is installed

    See http://www.zeroc.com/download.html

 4. Slice2Java plug-in is installed and configured

    See the section "Eclipse Development" above.

 5. The sample projects are configured to locate the Ice for Android
    run time JAR file (Ice.jar) via the ICE_HOME classpath variable
    (see "Configuring your Project" above). If you replaced Ice.jar
    in your standard Ice installation with the one in this
    distribution, no further action is necessary.

    If you installed Ice.jar in a different location, you will need to
    add it as an external JAR file in each sample project:

    1. Open the project's properties and select Java Build Path
    2. Click on the Libraries tab
    3. Click Add External JARs... and navigate to Ice.jar
    4. Click OK to save your settings

In Eclipse, you can open a sample project by choosing File->Import...;
in the "General" group, select "Existing Project into Workspace", then
open one of the subdirectories of

  <IceAndroid-install>/android/demo

To open the test suite project, select the following subdirectory:

  <IceAndroid-install>/android/testsuite

The projects are described below.


Hello
-----

The hello client is the Android equivalent of our command-line demo
of the same name. In order to use this client, you must run a hello
server and enter the server's address in the client's "Hostname" 
field. You can use a server from your Ice installation.


Chat
----

The chat client provides Android devices with native access to our
sample chat system. This client demonstrates several useful techniques
that are instructive for Android developers:

 * Issuing asynchronous Ice invocations to maintain a responsive user
   interface
 * Using Glacier2 and bidirectional connections to receive "push
   notifications" from a remote server
 * Proper separation of UI and application logic

By default the client uses "demo.zeroc.com" as its server, which
refers to the public chat server hosted by ZeroC. For more information
about the chat system, or to download the source code for the chat
system so that you can run your own server, please refer to the link
below:

  http://www.zeroc.com/chat/index.html


Library
-------

The library client is an example of an Android front-end for an
enterprise-style application. It allows you to query and manipulate
a library of books by issuing Ice invocations to a remote server
implemented using JDBC and MySQL. Like the chat client, this program
defaults to a ZeroC-hosted server on "demo2.zeroc.com". If you prefer,
you can download the source code for the library server as part of the
IceTouch release:

  http://www.zeroc.com/icetouch/download.html


Test Suite
----------

The Ice for Android test suite project contains an Android front end
for the Ice for Java tests. If you wish to use the test suite, you
must first build the Ice for Java tests in an Ice 3.4.1 source
distribution. The build process creates java/lib/IceTest.jar, and
you must add a reference to this JAR in the test suite project. The
easiest way to do this is to copy IceTest.jar into the lib
subdirectory of your Ice installation, in which case the project
requires no further configuration.

In order to build this project, it may be necessary for you to
increase Eclipse's maximum memory limit. Locate the eclipse.ini file
in your Eclipse installation and change it to contain the following
line:

  -Xmx512m

The test suite is entirely self-contained in that the client-server
communication all occurs locally between sockets in the same Android
process. When you start the test suite program, you are presented with
a list of all possible tests along with a checkbox that, when enabled,
forces all communication to use SSL instead of the default TCP. Each
test must be run individually; after starting a test, its progress is
displayed with "ok" messages indicating success. Upon the test's
completion, you can press the Next button to start the next test in
the sequence or press the Back button if you want to start a different
test.


======================================================================
6. Application Notes
======================================================================


Protocol Compression
--------------------

Ice for Android supports protocol compression using the bzip2 classes
included with Apache Ant. To enable this feature, the classes must be
present in the application's CLASSPATH or Android package (.apk) file.
The bzip2 classes can be found in ant.jar, or you can download only
the bzip2 classes from

  http://www.kohsuke.org/bzip2/

Note that these classes are a pure Java implementation of the bzip2
algorithm and therefore add significant latency to Ice requests.

Also be aware that the Ice run time loads these classes dynamically;
if you use a packaging tool such as ProGuard, you may need to
explicitly include the bzip2 classes to ensure that they are included
with the application. For more information on protocol compression,
see this issue of the newsletter:

  http://www.zeroc.com/newsletter/issue7.pdf
