======================================================================
Requirements
======================================================================


Windows version
---------------

Ice-E has been extensively tested on:

- Windows XP x86
- Windows Vista x86


C++ compiler
------------

The following C++ compilers are supported:

- Microsoft Visual C++ 2005 (both Professional and Express editions)

  Visual C++ 2005 Express is available for download from:

  http://msdn.microsoft.com/vstudio/express/visualc/


Visual C++ 2005 Express Setup
-----------------------------

Users of Visual C++ 2005 Express need to install the Microsoft
Platform SDK:

  http://www.microsoft.com/downloads/details.aspx?FamilyId=A55B6B43-E24F-4EA3-A93E-40C0EC4F68E5&displaylang=en

Once installed, follow the instructions at the link below:

  http://msdn.microsoft.com/vstudio/express/visualc/usingpsdk/

You also need to add the Platform SDK directories to the INCLUDE, LIB
and PATH environment variables. For example:

@SET PDK_HOME=C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2
@SET PATH=%PDK_HOME%\bin;%PATH%
@SET INCLUDE=%PDK_HOME%\include;%INCLUDE%
@SET LIB=%PDK_HOME%\lib;%LIB%

The PDK_HOME environment variable must be defined in order to build
the Ice-E source distribution. Note that PDK_HOME must not contain a
trailing backslash (\).

You may also need to execute the vsvars32.bat script, located in
C:\Program Files\Microsoft Visual Studio 8\Common7\Tools, to properly
configure your build environment.


Slice-to-Embedded-C++ translator
--------------------------------

You will need the Slice-to-Embedded-C++ translator (slice2cppe) and
preprocessor (icecpp). You can download a binary distribution from the
ZeroC web site, or you can build the Slice-to-Embedded-C++ translator
yourself.

Binary and source distributions for the supported platforms are
available at

http://www.zeroc.com/icee/download.html

The directory containing the translator executables must be added to
your PATH. For example, if the translator distribution is installed
in C:\IceE-@ver@, you must add C:\IceE-@ver@\bin to your PATH.


Python
------

You will need Python to run the automated test suite. If you have no
interest in running the test scripts, Python is not required.

You can download a Python distribution for Windows from

http://www.python.org/download


======================================================================
Compilation and Testing
======================================================================

Building Ice
------------

Using your favorite Zip tool, unzip the Ice source archive anywhere
you like.

Open a Visual Studio 2005 command prompt and change the working
directory to IceE-@ver@. For example:

> cd C:\IceE-@ver@

Edit config\Make.rules.mak to establish your build configuration. The
comments in the file provide more information. In particular, you must
ensure that CPP_COMPILER is set appropriately for your environment.

Now you're ready to build Ice-E:

> nmake /f Makefile.mak

After a successful build, you can run the test suite, provided that
you have installed Python:

> nmake /f makefile.mak test

This is equivalent to:

> python allTests.py

If everything worked out, you should see lots of "ok" messages. In
case of a failure, the tests abort with "failed".

If you want to try out any of the demos and you did not build Ice-E
statically, make sure to update your PATH environment variable to add
the "bin" directory that contains the Ice-E DLLs.


======================================================================
Installation
======================================================================

Simply run "nmake /f Makefile.mak install". This will install Ice-E in
the directory specified by the "prefix" variable in the file
config\Make.rules.mak.

After installation, make sure to add the include directory to the
Visual C++ "Include files" and the lib directory to the "Library files"
in the IDE (Tools->Options->Projects and Solutions->VC++ Directories).
