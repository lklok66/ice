======================================================================
Requirements
======================================================================


Windows version
---------------

Ice-E has been extensively tested on:

- Windows XP x86
- Windows Vista x86


C++ compiler
------------

The following C++ compilers are supported:

- Microsoft Visual C++ 2008 (Professional and Express editions)

  Visual C++ 2008 Express is available for download from:

  http://www.microsoft.com/express/vc/

- Microsoft Visual C++ 2005 SP1 (Professional and Express editions)

  Service Pack 1 is available for download from:

  http://msdn2.microsoft.com/en-us/vstudio/bb265237.aspx

  Visual C++ 2005 Express and SP1 is available for download from:

  http://www.microsoft.com/express/2005/


Visual C++ 2005 Express SP1 Setup
---------------------------------

Users of Visual C++ 2005 Express SP1 need to install the Microsoft
Platform SDK:

  http://www.microsoft.com/downloads/details.aspx?FamilyId=A55B6B43-E24F-4EA3-A93E-40C0EC4F68E5&displaylang=en

Once installed, follow the instructions at the link below:

  http://msdn2.microsoft.com/en-us/express/aa700755.aspx

You also need to add the Platform SDK directories to the INCLUDE, LIB
and PATH environment variables. For example:

@SET PDK_HOME=C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2
@SET PATH=%PDK_HOME%\bin;%PATH%
@SET INCLUDE=%PDK_HOME%\include;%INCLUDE%
@SET LIB=%PDK_HOME%\lib;%LIB%

The PDK_HOME environment variable must be defined in order to build
the Ice source distribution. Note that PDK_HOME must not contain a
trailing backslash (\).

You may also need to execute the vsvars32.bat script, located in
C:\Program Files\Microsoft Visual Studio 8\Common7\Tools, to properly
configure your build environment.


Slice-to-Embedded-C++ translator
--------------------------------

You will need the Slice-to-Embedded-C++ translator (slice2cppe). You
can download a binary distribution from the ZeroC web site, or you
can build the Slice-to-Embedded-C++ translator yourself using this
source distribution.

Binary distributions are available at

  http://www.zeroc.com/icee/download.html


Third-party libraries
---------------------

The Ice-E slice compiler (slice2cppe) has a dependency on the
following third-party library:

- mcpp 2.7.1

If you want to build the slice2cppe translator yourself, you can
avoid building mcpp from source code by downloading ZeroC's
Third-Party Windows installer for Visual Studio 2005/2008 that
contains release and debug libraries for all of the third-party
dependencies.

If you intend to build the third-party dependencies from source, we
recommend downloading the Ice third-party source archive from

  http://www.zeroc.com/download.html

This archive contains the source distributions for each of the
third-party dependencies, as well as required source patches and
configuration instructions.

For more information about mcpp, please refer to the link below:

  http://mcpp.sourceforge.net


======================================================================
Compilation and Testing
======================================================================

Using your favorite Zip tool, unzip the Ice-E source archive anywhere
you like.

Open a "Visual Studio Command Prompt" for your compiler and change the
working directory to IceE-@ver@. For example:

  > cd C:\IceE-@ver@

Edit cpp\config\Make.rules.mak and cppe\config\Make.rules.mak to
establish your build configuration. The comments in the file provide
more information. In particular, you must ensure that CPP_COMPILER is
set appropriately for your environment.

Now you're ready to build Ice-E:

  > nmake /f Makefile.mak configure
  > nmake /f Makefile.mak

Python is required to run the test suite:

  http://www.python.org/download

After a successful build, you can run the test suite:

  > nmake /f makefile.mak test

This is equivalent to:

  > python allTests.py

If everything worked out, you should see lots of "ok" messages. In
case of a failure, the tests abort with "failed".

If you want to try out any of the demos and you did not build Ice-E
statically, make sure to update your PATH environment variable to add
the "bin" directory that contains the Ice-E DLLs.


======================================================================
Installation
======================================================================

Simply run "nmake /f Makefile.mak install". This will install Ice-E in
the directory specified by the "prefix" variable in the file
config\Make.rules.mak.

After installation, make sure to add the include directory to the
Visual C++ "Include files" and the lib directory to the "Library files"
in the IDE (Tools->Options->Projects and Solutions->VC++ Directories).
