======================================================================
Requirements
======================================================================


Windows Mobile version
----------------------

Ice-E supports and has been extensively tested on:

- Windows Mobile 6 (ARMV4I)


C++ compiler
------------

The following Microsoft Visual C++ compilers are supported:

- Microsoft Visual C++ 2005 SP1
 
  Service Pack 1 is available for download from:

  http://msdn2.microsoft.com/en-us/vstudio/bb265237.aspx

- Microsoft Visual C++ 2008


Windows Mobile 6 SDK
--------------------

Ice-E requires either the Windows Mobile 6 Professional or Standard
SDK to be installed. Both of these can be obtained from:

  http://www.microsoft.com/downloads/details.aspx?FamilyId=06111A3A-A651-4745-88EF-3D48091A390B&displaylang=en  


Slice-to-Embedded-C++ translator
--------------------------------

You will need the Slice-to-Embedded-C++ translator (slice2cppe). You 
can download a binary distribution from the ZeroC web site, or you 
can build the Slice-to-Embedded-C++ translator yourself using this
source distribution.

Binary distributions are available at

  http://www.zeroc.com/icee/download.html


Third-party libraries
---------------------

The Ice-E slice compiler (slice2cppe) has a dependency on the
following third-party library:

- mcpp 2.7.1

If you want to build the slice2cppe translator yourself, you can
avoid building mcpp from source code by downloading ZeroC's
Third-Party Windows installer for Visual Studio 2005/2008 that
contains release and debug libraries for all of the third-party
dependencies.

If you intend to build the third-party dependencies from source, we
recommend downloading the Ice third-party source archive from

  http://www.zeroc.com/download.html

This archive contains the source distributions for each of the
third-party dependencies, as well as required source patches and
configuration instructions.

For more information about mcpp, please refer to the link below:

  http://mcpp.sourceforge.net

======================================================================
Installing and Configuring Microsoft Visual C++
======================================================================

- Install Visual Studio 2005 or 2008

- Install the Windows Mobile 6 SDK

- Add the location of the slice2cppe compiler to your "Executable
  files" list in Tools->Options->Projects and
  Solutions->VC++ Directories.


======================================================================
Compilation and Testing
======================================================================

Using your favorite Zip tool, unzip the Ice-E source archive anywhere
you like.

Open a "Visual Studio Command Prompt" for your compiler and change the
working directory to IceE-@ver@. For example:

  > cd C:\IceE-@ver@

Edit cpp\config\Make.rules.mak and cppe\config\Make.rules.mak to
establish your build configuration. The comments in the file provide
more information. In particular, you must set WINDOWS_MOBILE_SDK in
cppe\config\Make.rules.mak to the appropriate setting.

Now you're ready to build Ice-E:

  > nmake /f Makefile.mak configure
  > nmake /f Makefile.mak

In order to run the test suite, you must build all of the tests, and
then manually run the server for each test followed by the client on
your hardware. Any failures will be reported.


======================================================================
Installation
======================================================================

Simply run "nmake /f Makefile.mak install". This will install Ice-E in
the directory specified by the "prefix" variable in the 
cpp\config\Make.rules.mak (for slice compiler) and 
cppe\config\Make.rules.mak (for rest of Ice-E) files.

After installation, make sure to add the include directory to the
Visual C++ "Include files" and the lib directory to the "Library files"
in the IDE (Tools->Options->Projects and Solutions->VC++ Directories).
