======================================================================
Requirements
======================================================================


Operating System
----------------

Ice-E is expected to build and run properly on any recent Linux
distribution for x86 and x86_64. However, Ice-E is officially
supported only on:

Development Platform           | Runtime Platform
-------------------------------|--------------------------------------
Red Hat Enterprise Linux AS    | Same as development
4 update 4 (i386 or x86_64)    |
                               | 
Novell SuSE Linux Enterprise   | Same as development
Server 10 (i586 or x86_64)     |
                               |
Red Hat Enterprise Linux AS    | Gumstix Linux buildroot revision 1364
4 update 4 (i386) with Gumstix |
buildroot revision 1364        | 


C++ compiler
------------

Ice-E is expected to build properly with GCC 3.3 or later. However,
only the following compilers are officially supported:

 - GCC 3.4.6 on RHEL 4.4
 - GCC 4.1.0 on SLES 10
 - GCC 4.1.1 ARM cross-compiler for Gumstix


Slice-to-Embedded-C++ translator
--------------------------------

You will need the Slice-to-Embedded-C++ translator (slice2cppe) and
preprocessor (icecpp). You can download a binary distribution from
the ZeroC web site, or you can build the Slice-to-Embedded-C++
translator yourself.

Binary and source distributions for the supported platforms are
available at

http://www.zeroc.com/icee/download.html

The directory containing the translator executables must be added to
your PATH. For example, if the translator distribution is installed
in /opt/IceE-@ver@, you must add /opt/IceE-@ver@/bin to your PATH.


Python
------

You will need Python to run the automated test suite. If you have no
interest in running the test scripts, Python is not required.


======================================================================
Compilation and Testing
======================================================================

Extract the Ice-E archive in any directory you like (for example, in
your home directory):

$ tar xvfz IceE-@ver@.tar.gz

Change the working directory to IceE-@ver@:

$ cd IceE-@ver@

Review the README file to determine whether you want to modify the
default set of features provided by the run time libraries. Next,
edit config/Make.rules to establish your build configuration. The
comments in the file provide more information. 

Now you're ready to build Ice-E:

$ make

This will build the Ice-E library, tests and examples.

After a successful build, you can run the test suite, provided that
you have installed Python:

$ make test

This is equivalent to:

$ python allTests.py

If everything worked out, you should see lots of "ok" messages. In
case of a failure, the tests abort with "failed".

If you want to try out any of the demos and you did not build Ice-E
statically, make sure to update your LD_LIBRARY_PATH environment
variable to add the "lib" directory:

$ export LD_LIBRARY_PATH=`pwd`/lib:$LD_LIBRARY_PATH


Cross-compiling for Gumstix
---------------------------

To build Ice-E for the Gumstix embedded environment, you must first
build the buildroot toolchain. Ice-E has been tested with revision
1364 of buildroot. For information on how to obtain and build the
toolchain, please see the following link from the Gumstix Support
Wiki:

http://docwiki.gumstix.org/Buildroot

Make sure to enable C++ support in the toolchain, as discussed at
the link below:

http://docwiki.gumstix.org/Sample_code/Cpp/Hello_World

Once you have the toolchain built, add the bin directory to your path
by executing the following command:

$ export PATH=<Buildroot install dir>/build_arm_nofpu/staging_dir/bin:$PATH

You now must set the following environment variables:

$ export CXX=arm-linux-c++
$ export AR=arm-linux-ar

Finally, follow the regular Ice-E build steps as described above.

If you have python installed on your gumstix, you can execute the
allTests.py script to run the test suite. First you need to copy the
compiled tests and test suite scripts to your gumstix. From the Ice-E
source distribution base directory, run the following commands:

$ find . -name *.o | xargs rm
$ scp -r allTests.py config lib test <gumstix ipaddress>:<some directory>

The first command removes the object files so you don't copy them as
well. If you built Ice-E statically, there is no need to include "lib"
in the above command.

Finally, start the test suite by changing to your chosen installation
directory and running:

$ python allTests.py

If you do not have python then you can run most tests by manually
running the server in one window followed by the client in a separate
window.


======================================================================
32 bit builds on x86_64
======================================================================

By default, builds on x86_64 are 64-bit. To perform a 32-bit build on
an x86_64 Linux system, set the environment variable LP64 to no, as
shown below:

$ export LP64=no


======================================================================
Installation
======================================================================

Simply run "make install". This will install Ice-E in the directory
specified by the "prefix" variable in config/Make.rules.

After installation, make sure the <prefix>/lib directory is in your
LD_LIBRARY_PATH. When compiling Ice-E programs, you must also make
sure to pass the location of the <prefix>/include directory to the
compiler with the -I option, and the location of the <prefix>/lib
directory with the -L option.

On an x86_64 system, the libraries are installed in <prefix>/lib64
unless LP64 is set to no. No other changes are necessary.
