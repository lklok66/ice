Introduction
============

Ice-E is a compact subset of Ice designed for embedded environments
while retaining many of the features that have made Ice such a
compelling alternative for distributed applications.


Comparing Ice-E and Ice
=======================

In order to reduce the size of the Ice-E run time, several Ice
features have been removed, and others are optional. The differences
are discussed in the sections below.


Concurrency Models
------------------

Ice-E supports only the thread-per-connection server-side concurrency
model; the thread pool concurrency model is not supported.

Applications that make nested callbacks must be aware of the following
limitations of the thread-per-connection model:

* For bidirectional connections, the nested callback must be a oneway
  invocation.

* For regular (unidirectional) connections, the nested callback can
  be a twoway invocation.

* Only one level of nested callbacks is allowed.

For the client-side, Ice-E supports the thread-per-connection model as
well as a blocking concurrency model that can provide better
performance results. Set the configuration property Ice.Blocking=1 to
enable the blocking model. In addition to the limitations of the
thread-per-connection model described above, the blocking model also
disallows the use of bidirectional connections.


Transports
----------

Ice-E includes support for the TCP transport; UDP and SSL are not
supported. The built-in TCP transport can be replaced with one of your
own.


Servant Locators
----------------

Ice-E does not support servant locators. Ice-E applications must
use the active servant map.


Collocation Optimization
------------------------

Support for collocation optimization has been removed. Note that
Ice-E applications are still able to make invocations on collocated
servants, but those invocations are not optimized and therefore will
be marshaled and sent over the built-in transport.


Other Removed Features
----------------------

Ice-E has also eliminated the following features:

* Asynchronous invocation and dispatch
* Streaming APIs
* Active connection management
* Protocol compression
* Ice::Application and Ice::Service classes
* Local interfaces


Optional Features
-----------------

A number of Ice-E features are optional and can be omitted during
compilation to further reduce the size of the Ice-E run time. See the
"Configuration" section below for more information.


Compatibility
-------------

Ice-E and Ice share the same C++ mapping and remain source-code
compatible, given the limitations described above. Furthermore,
since the two products also share the same protocol, a distributed
system can use any combination of Ice and Ice-E applications.


Customization
-------------

If the current features do not meet your requirements, ZeroC can
customize Ice-E for commercial users. Please contact us at
info@zeroc.com for more information.


Run-time Libraries
==================

In order to minimize the size of Ice-E applications, two versions of
the run time library are provided:

* The "client" library is suitable for applications requiring only
  client-side functionality.

* The "server" library supports client- and server-side functionality.

A simple rule of thumb is to use the server library if your program
creates an object adapter, otherwise you can use the client library.

Users of the client library must define the preprocessor macro
ICEE_PURE_CLIENT when compiling an application and link with the
appropriate run time library.


Configuration
=============

You may build the Ice-E run-time libraries with certain components
disabled in order to further reduce the size of your applications. The
default configuration enables all of the optional components, but you
can selectively disable them by editing the file config/Make.rules
(Linux) or config\Make.rules.mak (Windows) and modifying their
corresponding settings. The optional components are described below.
For more information on these features, please refer to the Ice
manual.

Before building Ice-E for the first time, or after any change to the
configuration settings in Make.rules or Make.rules.mak, you must
make the "configure" target as shown below:

On Linux:

  $ make configure

On Windows:

  > nmake /f Makefile.mak configure

The purpose of the "configure" target is to generate the header file
include/Ice/Features.h with preprocessor macros that correspond to
your settings in Make.rules or Make.rules.mak.


Router Support
--------------

If HAS_ROUTER is enabled, the Ice-E libraries will include support for
the Ice router facility. This component is necessary in order to use
Ice-E with the Glacier2 router.

Applications that use routers often also receive callbacks from remote
servers. These applications must use the server library, because the
client library does not provide support for callbacks.


Locator Support
---------------

If HAS_LOCATOR is enabled, the Ice-E libraries will include support
for the Ice locator facility. This component is necessary in order to
use indirect proxies in Ice-E.


Batch Messages Support
----------------------

If HAS_BATCH is enabled, the Ice-E client library will include support
for sending batch messages. This feature cannot be disabled in the
server library.


Wstring and String Converter Support
------------------------------------

If HAS_WSTRING is enabled, the Ice-E libraries will include support
for using wide strings as well as configuring custom string
converters.


Opaque Endpoint Support
-----------------------

The HAS_OPAQUE_ENDPOINTS setting determines whether the Ice run time
preserves proxy endpoints whose types are not recognized. This feature
is unnecessary in an environment in which all clients and servers use
Ice-E, since TCP is the only supported transport. When Ice-E programs
communicate with Ice programs, however, it is possible for an Ice-E
program to receive a proxy that contains unsupported endpoints, such
as SSL or UDP. Ice-E discards these endpoints when this feature is
disabled, but discarding the endpoints prevents an Ice-E program from
forwarding the proxy with its original endpoints intact. Enabling
opaque endpoints causes Ice-E to retain unknown endpoints in the proxy
and include them if the proxy is later marshaled.


Objects by Value Support
------------------------

If HAS_OBV is enabled, the Ice-E libraries will include support for
sending and receiving objects by value.


Asychronous Method Invocation Support
-------------------------------------

If HAS_AMI is enabled, the Ice-E client mapping and library will
include support for issuing remote invocations asynchronously with
guaranteed non-blocking semantics.


Installation
============

For installation instructions, please refer to the INSTALL.* file for
your platform.
