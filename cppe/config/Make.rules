# **********************************************************************
#
# Copyright (c) 2003-2008 ZeroC, Inc. All rights reserved.
#
# This copy of Ice-E is licensed to you under the terms described in the
# ICEE_LICENSE file included in this distribution.
#
# **********************************************************************

#
# Select an installation base directory. The directory will be created
# if it does not exist.
#

prefix			= /opt/IceE-$(VERSION)

#
# Define OPTIMIZE_SIZE as yes if you want to build with minimal size.
# Define OPTIMIZE_SPEED as yes if you want to build with maximum speed.
# These options are mutually exclusive.
# If neither is set, IceE is built with debug information.
#

#OPTIMIZE_SIZE		= yes
#OPTIMIZE_SPEED		= yes

#
# Define STATICLIBS as yes if you want to build with static libraries.
# Otherwise IceE is built with dynamic libraries.
#

#STATICLIBS		= yes

#
# Define LP64 as yes or no if you want force a 32 or 64 bit. The default
# is platform-dependent
#
#LP64			:= yes

#
# The values below can be overridden by defining them as environment
# variables. For example, if you are using a bourne shell or
# compatible, you can override the location of STLport like this:
#
# export STLPORT_HOME=/usr/local/STLport-4.5
#

#
# If you want to use STLport, set STLPORT_HOME to the STLport
# installation directory. If STLPORT_HOME is undefined or empty,
# STLport is not used.
#

#STLPORT_HOME		?= /opt/STLport

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

SHELL			= /bin/sh
VERSION			= 1.3.0
SOVERSION		= 13
bindir			= $(top_srcdir)/bin
libdir			= $(top_srcdir)/lib
includedir		= $(top_srcdir)/include
slicedir		= $(top_srcdir)/slice

install_bindir	        = $(prefix)/bin

install_includedir	= $(prefix)/include
install_slicedir	= $(prefix)/slice
install_schemadir	= $(prefix)/schema
install_docdir		= $(prefix)/doc

INSTALL			= cp -fp
INSTALL_PROGRAM		= ${INSTALL}
INSTALL_LIBRARY		= ${INSTALL}
INSTALL_DATA		= ${INSTALL}

OBJEXT			= .o

UNAME			:= $(shell uname)

ifeq ($(OPTIMIZE_SPEED),yes)
    OPTIMIZE		= yes
endif
ifeq ($(OPTIMIZE_SIZE),yes)
    OPTIMIZE		= yes
endif

#
# Platform specific definitions
#
include	 $(top_srcdir)/config/Make.rules.$(UNAME)

ifeq ($(LP64),yes)
    install_libdir	  := $(prefix)/lib$(lp64suffix)
    libsubdir		  := lib$(lp64suffix)
else
    install_libdir	  := $(prefix)/lib
    libsubdir		  := lib
endif

ifneq ($(STLPORT_HOME),)
    STLPORT_FLAGS	= -I$(STLPORT_HOME)/include/stlport
    ifeq ($(OPTIMIZE),yes)
	STLPORT_LIBS	= -L$(STLPORT_HOME)/$(libsubdir) -lstlport_gcc
    else
	STLPORT_LIBS	= -L$(STLPORT_HOME)/$(libsubdir) -lstlport_gcc_stldebug
    endif
else
    STLPORT_FLAGS	=
    STLPORT_LIBS	=
endif

CPPFLAGS		= -I$(includedir) $(STLPORT_FLAGS)
ICECPPFLAGS		= -I$(slicedir)
SLICE2CPPEFLAGS		= $(ICECPPFLAGS)

LDFLAGS			=  $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(libdir)

ifeq ($(FLEX_NOLINE),yes)
    FLEXFLAGS	       := -L
else
    FLEXFLAGS	       :=
endif

ifeq ($(BISON_NOLINE),yes)
    BISONFLAGS		:= -dvtl
else
    BISONFLAGS		:= -dvt
endif

#
# Default functions for shared library names
#

ifeq ($(mklibfilename),)
    mklibfilename	= $(if $(2),lib$(1).so.$(2),lib$(1).so)
endif

ifeq ($(mksoname),)
    mksoname		= $(if $(2),lib$(1).so.$(2),lib$(1).so)
endif

ifeq ($(mklibname),)
    ifeq ($(STATICLIBS),yes)
        mklibname	= lib$(1).a
    else
        mklibname	= lib$(1).so
    endif
endif

ifndef mklibtargets
    ifeq ($(STATICLIBS),yes)
        mklibtargets	= $(3)
    else
        mklibtargets	= $(1) $(2) $(3)
    endif
endif

ifeq ($(mkshlib),)
    $(error You need to define mkshlib in Make.rules.$(UNAME)) 
endif

ifeq ($(mklib),)
    $(error You need to define mklib in Make.rules.$(UNAME)) 
endif

ifeq ($(installlib),)
    ifeq ($(STATICLIBS),yes)
	installlib	= $(INSTALL) $(2)/$(5) $(1); \
			  chmod a+rx $(1)/$(5)
    else
        installlib	= $(INSTALL) $(2)/$(3) $(1); \
			  rm -f $(1)/$(4); ln -s $(3) $(1)/$(4); \
			  rm -f $(1)/$(5); ln -s $(4) $(1)/$(5); \
			  chmod a+rx $(1)/$(3) 
    endif
endif

ifeq ($(installdata),)
    installdata		= $(INSTALL_DATA) $(1) $(2); \
			  chmod a+r $(2)/$(notdir $(1))
endif

ifeq ($(installprogram),)
    installprogram	= $(INSTALL_PROGRAM) $(1) $(2); \
			  chmod a+rx $(2)/$(notdir $(1))
endif

ifeq ($(mkdir),)
    mkdir		= mkdir $(1) ; \
			  chmod a+rx $(1)
endif

SLICE2CPPE		= slice2cppe

EVERYTHING		= all depend clean install

.SUFFIXES:
.SUFFIXES:		.cpp .c .o

.cpp.o:
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

.c.o:
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $<


$(HDIR)/%F.h: $(SDIR)/%F.ice
	rm -f $(HDIR)/$(*F)F.h $(*F)F.cpp
	$(SLICE2CPPE) $(SLICE2CPPEFLAGS) $<
	mv $(*F)F.h $(HDIR)
	rm -f $(*F)F.cpp

$(HDIR)/%.h %.cpp: $(SDIR)/%.ice
	rm -f $(HDIR)/$(*F).h $(*F).cpp
	$(SLICE2CPPE) $(SLICE2CPPEFLAGS) $<
	mv $(*F).h $(HDIR)

%.h %.cpp: %.ice
	rm -f $(*F).h $(*F).cpp
	$(SLICE2CPPE) $(SLICE2CPPEFLAGS) $(*F).ice	

%.h %.cpp: %.y
	rm -f $(*F).h $(*F).cpp
	bison $(BISONFLAGS) $<
	mv $(*F).tab.c $(*F).cpp
	mv $(*F).tab.h $(*F).h
	rm -f $(*F).output

%.cpp: %.l
	flex $(FLEXFLAGS) $<
	rm -f $@
	echo '#include <IceE/Config.h>' > $@
	cat lex.yy.c >> $@
	rm -f lex.yy.c

all:: $(SRCS) $(TARGETS)

depend:: $(SRCS) $(patsubst $(SDIR)/%.ice,$(HDIR)/%.h,$(wildcard $(SDIR)/*F.ice)) $(SLICE_SRCS)
	-rm -f .depend
	if test -n "$(SRCS)" ; then \
	    $(CXX) -DMAKEDEPEND -M $(CXXFLAGS) $(CPPFLAGS) $(SRCS) | \
	    $(top_srcdir)/config/makedepend.py >> .depend; \
	fi
	if test -n "$(SLICE_SRCS)" ; then \
	    $(SLICE2CPPE) --depend $(SLICE2CPPEFLAGS) $(SLICE_SRCS) | \
	    $(top_srcdir)/config/makedepend.py >> .depend; \
	fi

clean::
	-rm -f $(TARGETS)
	-rm -f core *.o *.bak

ifneq ($(SLICE_SRCS),)
clean::
	rm -f $(addsuffix .cpp, $(basename $(notdir $(SLICE_SRCS))))
	rm -f $(addsuffix .h, $(basename $(notdir $(SLICE_SRCS))))
endif
ifneq ($(HDIR),)
clean::
	rm -f $(addprefix $(HDIR), $(addsuffix .h, $(basename $(subst $(SDIR),, \
	$(filter $(SDIR)/%.ice, $(SLICE_SRCS))))))
endif

ifneq ($(TEMPLATE_REPOSITORY),)
clean::
	rm -fr $(TEMPLATE_REPOSITORY)
endif

install::
