// **********************************************************************
//
// Copyright (c) 2003-2012 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

(
    {
        Identifier = "xcode.lang.slice";
        Description = "Slice Coloring";
        IncludeInMenu = YES;
        BasedOn = "xcode.lang.simpleColoring";
        Name = "Slice";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            IncludeRules = (        // processed in order
                "xcode.lang.slice.module"
            );
            Type = "xcode.syntax.plain";
        };
    },

/****************************************************************************/
// MARK: module
/****************************************************************************/

    {
        Identifier = "xcode.lang.slice.module";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Foldable = YES;
            Recursive = YES;
            Rules = (
                "module",
                "xcode.lang.slice.module.name",
                "xcode.lang.slice.module.block"
            );
        };
    },

    {
        Identifier = "xcode.lang.slice.module.block";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.slice.interface",
                "xcode.lang.slice.class",
                "xcode.lang.slice.exception",
                "xcode.lang.slice.sequence",
                "xcode.lang.slice.dictionary",
            );
        };
    },

    {
        Identifier = "xcode.lang.slice.module.name";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "xcode.lang.slice.identifier"
            );
            Type = "xcode.syntax.name.partial";
        };
    },

/****************************************************************************/
// MARK: sequence
/****************************************************************************/

    {
        Identifier = "xcode.lang.slice.sequence";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "xcode.lang.slice.sequence.declarator",
            );
            Type = "xcode.syntax.typedef";
        };
    },

    {
        Identifier = "xcode.lang.slice.sequence.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "sequence",
                "xcode.lang.slice.sequence.type",
                "xcode.lang.slice.sequence.name",
            );
        };
    },

    {
        Identifier = "xcode.lang.slice.sequence.type";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Start = "<";
            End = ">";
        };
    },

    {
        Identifier = "xcode.lang.slice.sequence.name";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "xcode.lang.slice.identifier"
            );
            Type = "xcode.syntax.name.partial";
        };
    },

/****************************************************************************/
// MARK: dictionary
/****************************************************************************/

    {
        Identifier = "xcode.lang.slice.dictionary";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "xcode.lang.slice.dictionary.declarator",
            );
            Type = "xcode.syntax.typedef";
        };
    },

    {
        Identifier = "xcode.lang.slice.dictionary.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "dictionary",
                "xcode.lang.slice.dictionary.type",
                "xcode.lang.slice.dictionary.name",
            );
        };
    },

    {
        Identifier = "xcode.lang.slice.dictionary.type";
        Syntax = {
            Tokenizer = "xcode.lang.java.lexer";
            Start = "<";
            End = ">";
        };
    },

    {
        Identifier = "xcode.lang.slice.dictionary.name";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "xcode.lang.slice.identifier"
            );
            Type = "xcode.syntax.name.partial";
        };
    },

/****************************************************************************/
// MARK: exception
/****************************************************************************/

    {
        Identifier = "xcode.lang.slice.exception";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Foldable = YES;
            Rules = (
                "xcode.lang.slice.exception.declarator",
                "xcode.lang.slice.exception.block",
            );
            //Type = "xcode.syntax.definition.java.class";
            Type = "xcode.syntax.typedef";
        };
    },

    {
        Identifier = "xcode.lang.slice.exception.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "exception",
                "xcode.lang.slice.exception.name",
                "xcode.lang.slice.exception.declarator.extends?",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.slice.exception.name";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "xcode.lang.slice.identifier"
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    
    {
        Identifier = "xcode.lang.slice.exception.declarator.extends";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "extends",
                "xcode.lang.slice.qualifiedname",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.slice.exception.block";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
        };
    },

/****************************************************************************/
// MARK: interface
/****************************************************************************/

    {
        Identifier = "xcode.lang.slice.interface";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Foldable = YES;
            Recursive = YES;
            Rules = (
                "xcode.lang.slice.interface.declarator",
                "xcode.lang.slice.interface.block",
            );
            Type = "xcode.syntax.declaration.java.interface";
        };
    },

    {
        Identifier = "xcode.lang.slice.interface.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "interface",
                "xcode.lang.slice.class.name",
                "xcode.lang.slice.interface.declarator.extends?",
            );
        };
    },

    {
        Identifier = "xcode.lang.slice.class.name";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "xcode.lang.slice.identifier"
            );
            Type = "xcode.syntax.name.partial";
        };
    },

    {
        Identifier = "xcode.lang.slice.interface.declarator.extends";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "extends",
                "xcode.lang.slice.qualifiedname",
                "xcode.lang.slice.classnames.list*",
            );
        };
    },

    {
        Identifier = "xcode.lang.slice.qualifiedname";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "xcode.lang.slice.identifier",
                "xcode.lang.slice.qualifiedname.more*"
            );
        };
    },
    
    {
        Identifier = "xcode.lang.slice.qualifiedname.more";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "::",
                "xcode.lang.slice.identifier",
            );
        };
    },

    {
        Identifier = "xcode.lang.slice.interface.block";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.slice.method.definition",
                "xcode.lang.slice.method.declaration",
                "xcode.lang.slice.parenexpr"
            );
        };
    },

/****************************************************************************/
// MARK: class
/****************************************************************************/

    {
        Identifier = "xcode.lang.slice.class";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Foldable = YES;
            Recursive = YES;
            Rules = (
                "xcode.lang.slice.class.declarator",
                "xcode.lang.slice.class.block",
            );
            Type = "xcode.syntax.definition.java.class";
        };
    },

    {
        Identifier = "xcode.lang.slice.class.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "class",
                "xcode.lang.slice.class.name",
                "xcode.lang.slice.class.declarator.extends?",
                "xcode.lang.slice.class.declarator.implements?",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.slice.class.name";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "xcode.lang.slice.identifier"
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    
    {
        Identifier = "xcode.lang.slice.class.declarator.extends";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "extends",
                "xcode.lang.slice.qualifiedname",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.slice.class.declarator.implements";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "implements",
                "xcode.lang.slice.qualifiedname",
                "xcode.lang.slice.classnames.list*",
            );
        };
    },

    {
        Identifier = "xcode.lang.slice.classnames.list";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                ",",
                "xcode.lang.slice.qualifiedname",
            );
        };
    },

    {
        Identifier = "xcode.lang.slice.class.block";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.slice.method.definition",
                "xcode.lang.slice.method.declaration",
                "xcode.lang.slice.parenexpr"
            );
        };
    },

/****************************************************************************/
// MARK: Methods
/****************************************************************************/

    {
        Identifier = "xcode.lang.slice.method.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "xcode.lang.slice.method.declarator",
                "xcode.lang.slice.method.declarator.throws?",
                ";",
            );
            Type = "xcode.syntax.declaration.method";
        };
    },

    {
        Identifier = "xcode.lang.slice.method.definition";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "xcode.lang.slice.method.declarator",
                "xcode.lang.slice.method.declarator.throws?"
            );
            Type = "xcode.syntax.definition.method";
        };
    },
    
    {
        Identifier = "xcode.lang.slice.method.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "xcode.lang.slice.identifier",
                "xcode.lang.slice.parenexpr",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    
    {
        Identifier = "xcode.lang.slice.method.declarator.throws";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Rules = (
                "throws",
                "xcode.lang.slice.qualifiedname",
                "xcode.lang.slice.classnames.list*",
            );
        };
    },

    {
        Identifier = "xcode.lang.slice.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.slice.lexer";
            Start = "(";
            End = ")";
            Recursive = YES;
            IncludeRules = (
            );
        };
    },

/****************************************************************************/
// MARK:
/****************************************************************************/

    {
        Identifier = "xcode.lang.slice.comment.javadoc.keyword";
        Syntax = {
            StartChars = "@";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            Words = (
                "@author",
                "@beaninfo",
                "@deprecated",
                "@docRoot",
                "@exception",
                "@inheritDoc",
                "@link",
                "@linkplain",
                "@param",
                "@return",
                "@see",
                "@serial",
                "@serialData",
                "@serialField",
                "@since",
                "@throws",
                "@value",
                "@version"
            );
            Type = "xcode.syntax.comment.doc.keyword";
        };
    },
    {
        Identifier = "xcode.lang.slice.comment.javadoc";
        Syntax = {
            Start = "/**";
            End = "*/";
            Foldable = YES;
            IncludeRules = ( "xcode.lang.slice.comment.javadoc.keyword", "xcode.lang.url", "xcode.lang.url.mail", "xcode.lang.comment.mark" );
            Type = "xcode.syntax.comment.doc";
        };
    },
    {
        // Handle the degenerate case of '/**/' comments. They look like the start of a JavaDoc comment, but they aren't.
        Identifier = "xcode.lang.slice.comment.degenerate";
        Syntax = {
            StartChars = "/";
            Chars = "/*";
            Words = ( "/**/" );
            Type = "xcode.syntax.comment";
        };
    },

    // The following rule returns tokens to the other rules
    {
        Identifier = "xcode.lang.slice.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.slice.preprocessor",
                "xcode.lang.slice.comment.degenerate",
                "xcode.lang.slice.comment.javadoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.slice.identifier",
                "xcode.lang.number",
            );
        };
    },

    {
        Identifier = "xcode.lang.slice.identifier";
        Syntax = {
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words = (
                "module",
                "class",
                "interface",
                "exception",
                "struct",
                "sequence",
                "dictionary",
                "enum",
                "out",
                "extends",
                "implements",
                "throws",
                "void",
                "byte",
                "bool",
                "short",
                "int",
                "long",
                "float",
                "double",
                "string",
                "Object",
                "LocalObject",
                "local",
                "const",
                "false",
                "true",
                "nonmutating",
                "idempotent"
             );
            Type = "xcode.syntax.keyword";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers
        };
    },

/****************************************************************************/
// MARK: C Preprocessor
/****************************************************************************/

    {
        Identifier = "xcode.lang.slice.preprocessor";
        Syntax = {
            Start = "#";
            EscapeChar = "\\";
            End = "\n";
            
            // only recognize the '#' if it's the first non-whitespace on a line
            StartAtBOL = YES;
            
            // multi-line comments extend the preprocessor statement across lines too
            Tokenizer = "xcode.lang.slice.preprocessor.lexer";
            IncludeRules = (
                "xcode.lang.slice.preprocessor.mark",
                "xcode.lang.slice.preprocessor.include",
                "xcode.lang.slice.preprocessor.systeminclude",
                "xcode.lang.slice.preprocessor.import",
                "xcode.lang.slice.preprocessor.systemimport",
                "xcode.lang.slice.preprocessor.define",
                "xcode.lang.slice.preprocessor.warning",
                "xcode.lang.slice.preprocessor.error",
            );
            Type = "xcode.syntax.preprocessor";
        };
    },
    {
        Identifier = "xcode.lang.slice.preprocessor.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.number",
                "xcode.lang.slice.preprocessor.identifier",
            );
        };
    },
    {
        Identifier = "xcode.lang.slice.preprocessor.systemIncludeString";
        Syntax = {
            Start = "<";
            End = ">";
            Type = "xcode.syntax.string";
        };
    },

    {
        Identifier = "xcode.lang.slice.preprocessor.identifier";
        Syntax = {
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words =  (
                "define",
                "elif",
                "else",
                "endif",
                "error",
                "if",
                "ifdef",
                "ifndef",
                "import",
                "include",
                "line",
                "pragma",
                "undef",
                "warning",
            );
            Type = "xcode.syntax.preprocessor.keyword";
            AltType = "xcode.syntax.preprocessor.identifier";
        };
    },
 
    {
        Identifier = "xcode.lang.slice.preprocessor.mark";
        Syntax = {
            Tokenizer = "xcode.lang.slice.preprocessor.lexer";
            Rules = (
                "pragma",
                "xcode.lang.slice.preprocessor.mark.therest",
            );
            Type = "xcode.syntax.preprocessor";
        };
    },
    {
        Identifier = "xcode.lang.slice.preprocessor.mark.therest";
        Syntax = {
            Match = (
                "^[ \t]*mark[ \t]*\(.*\)$"
            );
            CaptureTypes = (
                "xcode.syntax.mark"
            );
            Type = "xcode.syntax.preprocessor";
        };
    },
    {
        Identifier = "xcode.lang.slice.preprocessor.define";
        Syntax = {
            Tokenizer = "xcode.lang.slice.preprocessor.lexer";
            Rules = (
                "define",
                "xcode.lang.slice.preprocessor.define.name",
            );
            Type = "xcode.syntax.preprocessor";
        };
    },
    {
        Identifier = "xcode.lang.slice.preprocessor.define.name";
        Syntax = {
            Tokenizer = "xcode.lang.slice.preprocessor.lexer";
            Rules = (
                "xcode.lang.slice.preprocessor.identifier",
            );
            Type = "xcode.syntax.definition.macro";
        };
    },
    {
        Identifier = "xcode.lang.slice.preprocessor.warning";
        Syntax = {
            Start = "warning";
            EscapeChar = "\\";
            Until = "\n";
            Type = "xcode.syntax.preprocessor";
        };
    },
    {
        Identifier = "xcode.lang.slice.preprocessor.error";
        Syntax = {
            Start = "error";
            EscapeChar = "\\";
            Until = "\n";
            Type = "xcode.syntax.preprocessor";
        };
    },
    {
        Identifier = "xcode.lang.slice.preprocessor.include.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.string",
                "xcode.lang.slice.preprocessor.systemIncludeString",
                "xcode.lang.character",
                "xcode.lang.number",
                "xcode.lang.slice.preprocessor.identifier",
            );
        };
    },
    {
        Identifier = "xcode.lang.slice.preprocessor.include";
        Syntax = {
            Tokenizer = "xcode.lang.slice.preprocessor.include.lexer";
            Rules = (
                "include",
                "xcode.lang.string",
            );
            Type = "xcode.syntax.preprocessor.include";
        };
    },
    {
        Identifier = "xcode.lang.slice.preprocessor.systeminclude";
        Syntax = {
            Tokenizer = "xcode.lang.slice.preprocessor.include.lexer";
            Rules = (
                "include",
                "xcode.lang.slice.preprocessor.systemIncludeString",
            );
            Type = "xcode.syntax.preprocessor.include";
        };
    },
    {
        Identifier = "xcode.lang.slice.preprocessor.import";
        Syntax = {
            Tokenizer = "xcode.lang.slice.preprocessor.include.lexer";
            Rules = (
                "import",
                "xcode.lang.string",
            );
            Type = "xcode.syntax.preprocessor.include";
        };
    },
    {
        Identifier = "xcode.lang.slice.preprocessor.systemimport";
        Syntax = {
            Tokenizer = "xcode.lang.slice.preprocessor.include.lexer";
            Rules = (
                "import",
                "xcode.lang.slice.preprocessor.systemIncludeString",
            );
            Type = "xcode.syntax.preprocessor.include";
        };
    },


)
