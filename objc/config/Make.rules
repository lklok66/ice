# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice Touch is licensed to you under the terms described
# in the ICE_TOUCH_LICENSE file included in this distribution.
#
# **********************************************************************

#
# Select an installation base directory for a command line build. The
# directory will be created if it does not exist.
#
prefix			 ?= /opt/IceTouch-$(VERSION)

#
# Xcode root directory. If you have several Xcode versions installed,
# choose the version you want to use to build the SDKs and Xcode
# plug-in. The default is the one installed in "/Developer".
#
#DEVELOPER_PATH          = /Developer

#
# The "root directory" for runpath embedded in executables. Can be
# unset to avoid adding a runpath to Ice executables. This setting
# only applies for Mac OS X command line builds.
#
embedded_runpath_prefix  ?= /opt/IceTouch-$(VERSION_MAJOR).$(VERSION_MINOR)

#
# Define OPTIMIZE_SIZE as yes if you want to build with minimal size.
# Define OPTIMIZE_SPEED as yes if you want to build with maximum speed.
#
# These options are mutually exclusive. If neither is set, Ice Touch
# is built with debug information.
#
#OPTIMIZE_SIZE		= yes
#OPTIMIZE_SPEED		= yes

#
# Compile for the iPhone platform (an Xcode SDK).
#
#COMPILE_FOR_IPHONE	    	= yes

#
# Compile for the iPhone simulator platform (an Xcode SDK).
#
#COMPILE_FOR_IPHONE_SIMULATOR 	= yes

#
# Compile for Cocoa (an Xcode SDK).
#
#COMPILE_FOR_COCOA 	        = yes

#
# The default is to build for a Mac OS X command line dynamic library.
#

#
# The default SDK version is 5.0 for iPhone, supported versions
# are 5.0, 4.3 and 4.2
#
#IPHONE_SDK_VERSION			= 5.0

#
# The min SDK version supported by targets
#
#
#IPHONE_TARGET_MIN_SDK_VERSION          = 4.2

#
# You can choose to build static libraries for the Mac OS X command
# line build.
#
#STATICLIBS			= yes

#
# Install the Xcode plug-in for all users. Default is to install
# to the user home dir.
#
#XCODE_PLUGIN_ALL_USERS		= yes

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

#
# Common definitions
#
ice_language     = objc
slice_translator = slice2objc

ifeq ($(COMPILE_CPP_SDK),yes)
	USE_CPP_SDK	= yes
endif

ifeq ($(IPHONESDK_VERSION),)

IPHONE_SDK_VERSION = 5.0

endif

ifeq ($(IPHONE_TARGET_MIN_SDK_VERSION),)

IPHONE_TARGET_MIN_SDK_VERSION = 4.2

endif

ifeq ($(DEVELOPER_PATH),)

DEVELOPER_PATH = /Developer

endif

#
# Set the platform name according to the build type.
#
ifeq ($(COMPILE_FOR_IPHONE_SIMULATOR),yes)
    STATICLIBS = yes
    PLATFORM_NAME = iphonesimulator
else ifeq ($(COMPILE_FOR_IPHONE),yes)
    STATICLIBS = yes
    PLATFORM_NAME = iphoneos
else ifeq ($(COMPILE_FOR_COCOA),yes)
    STATICLIBS = yes
    PLATFORM_NAME = macosx
else
    PLATFORM_NAME = macosx
    COMPILE_FOR_MACOSX = yes
endif


ifeq ($(shell test -f $(top_srcdir)/config/Make.common.rules.objc && echo 0),0)
    include $(top_srcdir)/config/Make.common.rules.objc
else
    include $(top_srcdir)/../config/Make.common.rules.objc
endif

ifeq ($(OPTIMIZE_SPEED),yes)
    OPTIMIZE		= yes
else ifeq ($(OPTIMIZE_SIZE),yes)
    OPTIMIZE		= yes
else ifeq ($(OPTIMIZE),yes)
    OPTIMIZE_SPEED	= yes
endif

ifeq ($(COMPILE_WITH_CFSTREAM_TRANSPORT),)
    ifneq ($(PLATFORM_NAME),macosx)
	COMPILE_WITH_CFSTREAM_TRANSPORT=yes
    endif
endif

ifeq ($(COMPILE_WITH_GC),)
    ifeq ($(PLATFORM_NAME),macosx)
       COMPILE_WITH_GC = yes
    endif
endif

SDK_DIR                 = $(top_srcdir)/SDK/IceTouch-$(VERSION)/$(PLATFORM_NAME).sdk
CPP_SDK_DIR             = $(top_srcdir)/SDK/IceTouchCpp-$(VERSION)/$(PLATFORM_NAME).sdk

bindir			= $(top_srcdir)/bin
includedir		= $(top_srcdir)/include

ifeq ($(COMPILE_FOR_MACOSX),yes)
    ifeq ($(USE_CPP_SDK),)
    	libdir		= $(top_srcdir)/lib
    	install_includedir	:= $(prefix)/include
    	install_libdir	:= $(prefix)/$(libsubdir)
    	install_bindir	:= $(prefix)/$(binsubdir)
    else
    	libdir  = $(CPP_SDK_DIR)/usr/local/lib
    endif
else
    ifeq ($(libdir),)
	ifeq ($(USE_CPP_SDK),)
		libdir	= $(SDK_DIR)/usr/local/lib
	else
		libdir  = $(CPP_SDK_DIR)/usr/local/lib
	endif
    endif
endif

cpp_sdk_libdir  = $(CPP_SDK_DIR)/usr/local/lib

#
# Platform specific definitions
#
include	 $(top_srcdir)/config/Make.rules.$(UNAME)

ifdef ice_src_dist
    ifeq ($(ice_dir), $(ice_dir)/cpp)
        ICE_LIB_DIR = -L$(ice_cpp_dir)/lib
    else
        ICE_LIB_DIR = -L$(ice_cpp_dir)/$(libsubdir)
    endif
    ICE_LIB_DIR = -L$(ice_cpp_dir)/lib
    ICE_FLAGS 	= -I$(ice_cpp_dir)/include
endif
ifdef ice_bin_dist
    includedir	= $(ice_dir)/include
    ICE_LIB_DIR = -L$(ice_dir)/$(libsubdir)
    ICE_FLAGS	= -I$(ice_dir)/include
endif
ICE_LIBS = $(ICE_LIB_DIR) -lIce -lSlice -lIceUtil

ifneq ($(embedded_runpath_prefix),)
   runpath_libdir	:= $(embedded_runpath_prefix)/$(libsubdir)
   ifneq ($(COMPILE_FOR_IPHONE),yes)
       ifneq ($(STATICLIBS),yes)
           create_runpath_symlink ?= yes
       endif
   endif
endif

ICECPPFLAGS		= -I$(slicedir)
SLICE2CPPFLAGS		= $(ICECPPFLAGS)
SLICE2OBJCFLAGS		= $(ICECPPFLAGS)
LDFLAGS			= $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(libdir)

FLEXFLAGS	        :=
BISONFLAGS		:= -dvt

ifeq ($(ice_dir), /usr) 
    CPPFLAGS		= 
    LDFLAGS		= $(LDPLATFORMFLAGS) $(CXXFLAGS)
else
    CPPFLAGS		= -I$(includedir) $(CPPPLATFORMFLAGS)
    ifdef ice_src_dist
        LDFLAGS		= $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(libdir) 
    else
        LDFLAGS		= $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(ice_dir)/$(libsubdir) 
    endif
endif

ifdef ice_src_dist
    ifeq ($(ice_cpp_dir), $(ice_dir)/cpp)
        SLICE2CPP = $(ice_cpp_dir)/bin/slice2cpp
        SLICE2OBJC = $(ice_cpp_dir)/bin/slice2objc
    else
        SLICE2CPP = $(ice_cpp_dir)/$(binsubdir)/slice2cpp
        SLICE2OBJC = $(ice_cpp_dir)/$(binsubdir)/slice2objc
    endif
else
    SLICE2CPP = $(ice_dir)/$(binsubdir)/slice2cpp
    SLICE2OBJC = $(ice_dir)/$(binsubdir)/slice2objc
endif

ifeq ($(STATICLIBS),yes)
    ICEOBJCLIB = $(top_srcdir)/lib/libIceObjC.a
endif

# This cannot use .cpp:.o as we have multiple types of source files.

EVERYTHING		= all depend clean install 

.SUFFIXES:
.SUFFIXES:		.mm .m .o .cpp  .c

.m.o:
	$(CC) -c $(CPPFLAGS) $(OBJCFLAGS) $(CFLAGS) $<

.mm.o:
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $(OBJCXXFLAGS) $<

%.o: %.cpp
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

%.h %.m: %.y
	rm -f $(*F).h $(*F).c
	bison $(BISONFLAGS) $<
	mv $(*F).tab.c $(*F).m
	mv $(*F).tab.h $(*F).h
	rm -f $(*F).output

%.m: %.l
	flex $(FLEXFLAGS) $<
	rm -f $@
	cat lex.yy.c >> $@
	rm -f lex.yy.c

all:: $(SRCS) $(TARGETS)

ifneq ($(SRCS),)
depend:: $(SRCS)
	-rm -f .depend
	if test -n "$(SRCS)" ; then \
	    $(CXX) -DMAKEDEPEND -M $(CPPFLAGS) $(SRCS) | $(ice_dir)/objc/config/makedepend.py $(DEPENDFLAGS) >> .depend; \
	fi
endif

ifneq ($(TARGETS),)
clean::
	-rm -f $(TARGETS)
endif

clean::
	-rm -f core *.o *.bak
	-rm -f ./$(PLATFORM_NAME)/*.o

$(HDIR)/%F.h: $(SDIR)/%F.ice $(SLICE2OBJC)
	rm -f $(HDIR)/$(*F)F.h $(*F)F.m
	$(SLICE2OBJC) $(SLICE2OBJCFLAGS) $<
	mv $(*F)F.h $(HDIR)
	rm -f $(*F)F.m

$(HDIR)/%.h %.m: $(SDIR)/%.ice $(SLICE2OBJC)
	rm -f $(HDIR)/$(*F).h $(*F).m
	$(SLICE2OBJC) $(SLICE2OBJCFLAGS) $<
	mv $(*F).h $(HDIR)

%.h %.m: %.ice $(SLICE2OBJC)
	rm -f $(*F).h $(*F).m
	$(SLICE2OBJC) $(SLICE2OBJCFLAGS) $<

ifeq ($(USE_CPP_SDK),)
ifneq ($(SLICE_SRCS),)
depend:: $(SLICE_SRCS)
	if test -n "$(SLICE_SRCS)" ; then \
	    $(SLICE2OBJC) --depend $(SLICE2OBJCFLAGS) $(SLICE_SRCS) | $(ice_dir)/config/makedepend.py >> .depend; \
	fi
	$(foreach slice, $(SLICE_SRCS), echo '$(slice): $$(SLICE2OBJC)' >> .depend;)

clean::
	rm -f $(addsuffix .m, $(basename $(notdir $(SLICE_SRCS))))
	rm -f $(addsuffix .h, $(basename $(notdir $(SLICE_SRCS))))
endif
endif

ifneq ($(HDIR),)
clean::
	rm -f $(addprefix $(HDIR), $(addsuffix .h, $(basename $(subst $(SDIR),, \
	$(filter $(SDIR)/%.ice, $(SLICE_SRCS))))))
endif

install::

