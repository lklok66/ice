# **********************************************************************
#
# Copyright (c) 2003-2008 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

#
# Select an installation base directory. The directory will be created
# if it does not exist.
#
prefix			 ?= /opt/Ice-$(VERSION)

#
# The "root directory" for runpath embedded in executables. Can be unset
# to avoid adding a runpath to Ice executables.
#
embedded_runpath_prefix  ?= /opt/Ice-$(VERSION_MAJOR).$(VERSION_MINOR)

#
# Define OPTIMIZE_SIZE as yes if you want to build with minimal size.
# Define OPTIMIZE_SPEED as yes if you want to build with maximum speed.
# These options are mutually exclusive.
# If neither is set, Ice-ObjC is built with debug information.
#
#OPTIMIZE_SIZE		= yes
#OPTIMIZE_SPEED		= yes

#
# Define COMPILE_FOR_IPHONE or COMPILE_FOR_IPHONE_EMULATOR as yes if
# you want to build Ice for Objective-C with the iPhone SDK.
#
#COMPILE_FOR_IPHONE	    	= yes
COMPILE_FOR_IPHONE_SIMULATOR 	= yes

#STATICLIBS			= yes

# Define the identity of the installed signing certificate if you want
# to sign the Ice shared libraries.
#IDENTIFIER = "iPhone Developer: Matthew Newhook"

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

#
# Common definitions
#
ice_language     = objc
ice_require_cpp	 = yes
slice_translator = slice2objc

ifeq ($(shell test -f $(top_srcdir)/config/Make.common.rules && echo 0),0)
    include $(top_srcdir)/config/Make.common.rules
else
    include $(top_srcdir)/../config/Make.common.rules
endif

ifeq ($(OPTIMIZE_SPEED),yes)
    OPTIMIZE		= yes
else ifeq ($(OPTIMIZE_SIZE),yes)
    OPTIMIZE		= yes
else ifeq ($(OPTIMIZE),yes)
    OPTIMIZE_SIZE	= yes
endif

bindir			= $(top_srcdir)/bin
libdir			= $(top_srcdir)/lib
includedir		= $(top_srcdir)/include
install_includedir	:= $(prefix)/include
install_bindir	  	:= $(prefix)/$(binsubdir)
install_libdir	  	:= $(prefix)/$(libsubdir)

#
# Platform specific definitions
#
include	 $(top_srcdir)/config/Make.rules.$(UNAME)

ifdef ice_src_dist
    ifeq ($(ice_cpp_dir), $(ice_dir)/cpp)
        ICE_LIB_DIR = -L$(ice_cpp_dir)/lib
    else
        ICE_LIB_DIR = -L$(ice_cpp_dir)/$(libsubdir)
    endif
    ICE_LIB_DIR = -L$(ice_cpp_dir)/lib
    ICE_FLAGS 	= -I$(ice_cpp_dir)/include
endif
ifdef ice_bin_dist
    ICE_LIB_DIR = -L$(ice_dir)/$(libsubdir)
    ICE_FLAGS	= -I$(ice_dir)/include
endif
ICE_LIBS = $(ICE_LIB_DIR) -lIce -lSlice -lIceUtil

ifneq ($(embedded_runpath_prefix),)
   runpath_libdir	:= $(embedded_runpath_prefix)/$(libsubdir)
endif

ICECPPFLAGS		= -I$(slicedir)
SLICE2CPPFLAGS		= $(ICECPPFLAGS)
SLICE2OBJCFLAGS		= $(ICECPPFLAGS)
LDFLAGS			= $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(libdir)

FLEXFLAGS	        :=
BISONFLAGS		:= -dvt

ifeq ($(ice_dir), /usr) 
    CPPFLAGS		= 
    LDFLAGS		= $(LDPLATFORMFLAGS) $(CXXFLAGS)
else
    CPPFLAGS		= -I$(includedir) $(CPPPLATFORMFLAGS)
    ifdef ice_src_dist
        LDFLAGS		= $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(libdir) 
    else
        LDFLAGS		= $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(ice_dir)/$(libsubdir) 
    endif
endif

ifdef ice_src_dist
    ifeq ($(ice_cpp_dir), $(ice_dir)/cpp)
        SLICEPARSERLIB = $(ice_cpp_dir)/lib/$(call mklibfilename,Slice,$(VERSION))
        SLICE2CPP = $(ice_cpp_dir)/bin/slice2cpp
        SLICE2OBJC = $(ice_cpp_dir)/bin/slice2objc
    else
        SLICEPARSERLIB = $(ice_cpp_dir)/$(libsubdir)/$(call mklibfilename,Slice,$(VERSION))
        SLICE2CPP = $(ice_cpp_dir)/$(binsubdir)/slice2cpp
        SLICE2OBJC = $(ice_cpp_dir)/$(binsubdir)/slice2objc
    endif
else
    SLICEPARSERLIB = $(ice_dir)/$(libsubdir)/$(call mklibfilename,Slice,$(VERSION))
    SLICE2CPP = $(ice_dir)/$(binsubdir)/slice2cpp
    SLICE2OBJC = $(ice_dir)/$(binsubdir)/slice2objc
endif

ifeq ($(STATICLIBS),yes)
    ICEOBJCLIB = $(top_srcdir)/lib/libIceObjC.a
endif

EVERYTHING		= all depend clean install 

.SUFFIXES:
.SUFFIXES:		.mm .m .o .cpp  .c

.m.o:
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $<

.mm.o:
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

%.o: %.cpp
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

%.o: $(SRCS_DIR)/%.cpp
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

$(HDIR)/%F.h: $(SDIR)/%F.ice $(SLICE2OBJC) $(SLICEPARSERLIB)
	rm -f $(HDIR)/$(*F)F.h $(*F)F.m
	$(SLICE2OBJC) $(SLICE2OBJCFLAGS) $<
	mv $(*F)F.h $(HDIR)
	rm -f $(*F)F.m

$(HDIR)/%.h %.m: $(SDIR)/%.ice $(SLICE2OBJC) $(SLICEPARSERLIB)
	rm -f $(HDIR)/$(*F).h $(*F).m
	$(SLICE2OBJC) $(SLICE2OBJCFLAGS) $<
	mv $(*F).h $(HDIR)

%.h %.m: %.ice $(SLICE2OBJC) $(SLICEPARSERLIB)
	rm -f $(*F).h $(*F).m
	$(SLICE2OBJC) $(SLICE2OBJCFLAGS) $<

%.h %.m: %.y
	rm -f $(*F).h $(*F).c
	bison $(BISONFLAGS) $<
	mv $(*F).tab.c $(*F).m
	mv $(*F).tab.h $(*F).h
	rm -f $(*F).output

%.m: %.l
	flex $(FLEXFLAGS) $<
	rm -f $@
	cat lex.yy.c >> $@
	rm -f lex.yy.c

all:: $(SRCS)

ifeq ($(COMPILE_FOR_IPHONE),yes)
all:: $(TARGETS_IPHONE)
else
all:: $(TARGETS_MACOS)
endif

all:: $(TARGETS)

ifneq ($(SRCS),)
depend:: $(SRCS)
	-rm -f .depend
	if test -n "$(SRCS)" ; then \
	    $(CXX) -DMAKEDEPEND -M $(CPPFLAGS) $(SRCS) | $(ice_dir)/config/makedepend.py >> .depend; \
	fi
endif

clean::
	-rm -f $(TARGETS)
	-rm -f core *.o *.bak

ifeq ($(COMPILE_FOR_IPHONE),yes)
clean::
	-rm -f $(TARGETS_IPHONE)
else
clean::
	-rm -f $(TARGETS_MACOS)
endif

ifneq ($(SLICE_SRCS),)
depend:: $(SLICE_SRCS)
	if test -n "$(SLICE_SRCS)" ; then \
	    $(SLICE2OBJC) --depend $(SLICE2OBJCFLAGS) $(SLICE_SRCS) | $(ice_dir)/config/makedepend.py >> .depend; \
	fi
	$(foreach slice, $(SLICE_SRCS), echo '$(slice): $$(SLICE2OBJC)' >> .depend;)

clean::
	rm -f $(addsuffix .m, $(basename $(notdir $(SLICE_SRCS))))
	rm -f $(addsuffix .h, $(basename $(notdir $(SLICE_SRCS))))
endif

ifneq ($(HDIR),)
clean::
	rm -f $(addprefix $(HDIR), $(addsuffix .h, $(basename $(subst $(SDIR),, \
	$(filter $(SDIR)/%.ice, $(SLICE_SRCS))))))
endif

install::
