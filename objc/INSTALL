======================================================================
Requirements
======================================================================


Operating system
----------------

Ice Touch requires:

- Mac OS X 10.5.7 or later
- iPod touch v2 using software version 2.2.1, or 3.0
- iPhone 3G using software version 2.2.1 or 3.0

We expect that Ice Touch will run on any iPhone OS 2.x version;
however, we did not test these versions--we tested only on iPhone OS
2.2.1 and 3.0.

Compiler
--------

To build iPhone applications, you need:

- Xcode 3.1.3
- iPhone SDK for iPhone OS 3.0 (build 9M2736)

To build Cocoa applications, you need Xcode 3.1.2 or later.


Slice translators
-----------------

You will need the Slice-to-Objective-C compiler (slice2objc) and the
Slice-to-C++ compiler (slice2cpp). The distribution includes binaries
for these compilers as well as the source code in case you want to
build them yourself.


mcpp
----

Building the mcpp library is only necessary if you want to build the
Slice translators yourself.

The Slice-to-Objective-C and Slice-to-C++ compilers
(slice2objc/slice2cpp) have a dependency on mcpp 2.7.2

We recommend downloading the Ice third-party source archive from

 http://www.zeroc.com/download.html

This archive contains the source distribution for mcpp (along with
other third-party dependencies for the full Ice distribution), as well
as required source patches and configuration instructions.

For more information about this dependency, please refer to the link
below:

 http://mcpp.sourceforge.net


XCode Plugin
------------

The XCode Plugin is required to build the Cocoa and iPhone demos from
this distribution. It's also strongly recommended to develop Ice for
C++ or Ice Touch applications with Xcode as it greatly simplifies the
process of building.

To build the Xcode plug-in:

$ cd Xcode/Slice2ObjcPlugin
$ xcodebuild -configuration Release

To install the plug-in either:

$ cp -r Xcode/Slice2ObjcPlugin/build/Release/slice2objcplugin.pbplugin \
    ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins

You may need to create this directory

or:

$ cp -r Xcode/Slice2ObjcPlugin/build/Release/slice2objcplugin.pbplugin \
    /Developer/Library/Xcode/Plug-ins


======================================================================
Compilation
======================================================================

Unpack the archive. The sources are contained in the IceTouch-@ver@
subdirectory.

Change the working directory to IceTouch-@ver@:

$ cd IceTouch-@ver@

Edit objc/config/Make.rules to establish your build configuration.
There are four possible build configurations:

* Build for Mac OS X

  - In objc/config/Make.rules, leave COMPILE_FOR_IPHONE and
    COMPILE_FOR_IPHONE_SIMULATOR unset

* Build for Cocoa

  - In objc/config/Make.rules, set COMPILE_FOR_COCOA=YES

* Build for the iPhone simulator

  - In objc/config/Make.rules, set COMPILE_FOR_IPHONE_SIMULATOR=YES

* Build for the iPhone or iPod touch

  - In objc/config/Make.rules, set COMPILE_FOR_IPHONE=YES

The Cocoa and iPhone SDKs are built with static libraries. The
simulator and Mac OS X builds use dynamic libraries. We do not recommend
changing these settings.

Now you are ready to build Ice Touch:

$ make

This will build the Ice Touch library and tests. If you are building
for Mac OS X, this will also build the demos.

If you are building for Cocoa, you should now use Xcode to build
the demos located in the following subdirectories:

  - objc/demo/Cocoa/chat
  - objc/demo/Cocoa/library

If you are building for iPhone or the iPhone simulator, you should
now use Xcode to build the demos and test suite GUI located in the
following subdirectories:

  - objc/demo/iPhone/chat
  - objc/demo/iPhone/library
  - objc/demo/iPhone/hello
  - objc/demo/iPhone/router
  - objc/test/iPhone/container

After a successful build, you can run the test suite.

Under Mac OS X, run:

$ cd objc
$ python allTests.py

If everything works, you should see lots of "ok" messages. In
case of a failure, the tests abort with "failed".

For the iPhone or iPhone simulator, the test suite runs within an
iPhone application named "Test Suite", located in the directory
objc/test/iPhone/container.


======================================================================
Installation
======================================================================

For the Mac OS X build, simply run "make install" to install Ice
Touch in the directory specified by the "prefix" variable in
objc/config/Make.rules.

For the Cocoa/iPhone and iPhone Simulator builds, copy the contents
of objc/SDK to either /Developer/SDKs, or ~/Library/SDKs.

For Mac OS X builds of Ice Touch, the install name of the shared
library is prefixed with the path /opt/IceTouch-@mmver@/lib.


======================================================================
Configuring the Xcode plug-in
======================================================================

The Xcode plugin simplifies the process of building Ice and Ice Touch
applications with Xcode.

The Xcode plug-in provides the following features:

  - Handles all aspects of translating your Slice files for both
    Objective-C and C++ projects.
  - Incrementally recompiles Slice files after modifications
  - Maintains dependencies between Slice files
  - Highlights compilation errors in your source code

The Xcode plug-in is configured using the per-target info build
settings, just as you would configure the compiler settings. Select a
target, press info (or Cmd-i), select the build tab, and enter "Slice"
in the "Search in Build Settings" field.

The following fields are defined:

- Header Search Path

   Set the list of directories to search for included Slice files
   (-I option). Note that the Ice Slice files are automatically in the
   header search path.

- Ice Home

  If you are building with the Ice Touch Xcode SDK, this should left
  unset; otherwise, if using the command line toolkit or regular Ice,
  set this to the location of the installation (ie: /opt/Ice-3.3.1, or
  /opt/IceTouch-1.0)

- Permit `Ice' prefix

  Pass --ice to the Slice compiler.

- Streaming support

  Pass --stream to the Slice compiler (C++ only).

- Checksum support

  Pass --checksum to the Slice compiler (C++ only).

- Preprocessor Macros

  Set the list of preprocessor macros to define (-D option).

- Translate C++ code

  If set, slice2cpp will be used to translate the Slice files,
  otherwise slice2objc is used.

You may set specific Slice compiler flags on individual source Slice
files by selecting the Slice file, press info (or Cmd-i), selecting
the build tab and entering any desired flags in "Additional Compiler
Flags for Target".
