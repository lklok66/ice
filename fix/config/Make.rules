# **********************************************************************
#
# Copyright (c) 2003-2008 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

#
# Select an installation base directory. The directory will be created
# if it does not exist.
#
prefix			 ?= /opt/Ice-$(VERSION)

#
# The "root directory" for runpath embedded in executables. Can be unset
# to avoid adding a runpath to Ice executables.
#
embedded_runpath_prefix  ?= /opt/Ice-$(VERSION_MAJOR).$(VERSION_MINOR)

#
# Define OPTIMIZE as yes if you want to build with
# optimization. Otherwise Ice is build with debug information.
#
#OPTIMIZE		= yes

#
# Define LP64 as yes or no if you want force a 32 or 64 bit. The
# default is platform-dependent
#
#LP64			?= yes

#
# Define USE_READLINE as yes if you want to build parts of Ice using
# readline on platforms where readline is available (see
# PLATFORM_HAS_READLINE in Make.rules.$(UNAME))
#
# readline is used by a number of Ice admin programs to provide
# command history, an optional feature.
#
# readline is licensed by the Free Software Foundation under the GNU
# Public License v2, and cannot be combined with GPL-incompatible
# software in any program. In particular the OpenSSL license is
# GPL-incompatible.
#
# If you combine Ice with more GPL-incompatible software, or have
# licensed Ice under a commercial (non-GPL) license, you should ponder
# the licensing implications of using readline.
# 
USE_READLINE		?= no


# If readline is not installed in a standard location where the
# compiler can find it, AND you want to use readline, set
# READLINE_HOME to the readline installation directory.
#
#READLINE_HOME		?= /opt/readline

#
# If QuickFix is not installed in a standard location where the
# compiler can find it, set QF_HOME to the QuickFix installation
# directory.
#
#QF_HOME		?= /opt/quickfix

#
# Generate position independent code unless GENPIC is set to no
#
#GENPIC                     ?= yes

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

#
# Common definitions
#
ice_language     = cpp
ifneq ($(shell test "$(USE_BIN_DIST)" != "yes" -a -d $(top_srcdir)/../$(ice_language) && echo 0),0)
    slice_translator = slice2cpp
    ice_require_cpp  = 1
endif

include $(top_srcdir)/config/Make.common.rules

bindir			= $(top_srcdir)/bin
libdir			= $(top_srcdir)/lib
headerdir		= $(top_srcdir)/include

includedir		= $(top_srcdir)/include

ifdef ice_src_dist
    ice_includedir	= $(ice_dir)/cpp/include
else
    ice_includedir	= $(ice_dir)/include
endif

#
# Platform specific definitions
#
#include	 $(top_srcdir)/config/Make.rules.$(UNAME)
#
# Platform specific definitions
#
ifeq ($(shell test -f $(top_srcdir)/config/Make.rules.$(UNAME) && echo 0),0)
   include $(top_srcdir)/config/Make.rules.$(UNAME)
else
   include $(top_srcdir)/../cpp/config/Make.rules.$(UNAME)
endif 

install_includedir	:= $(prefix)/include
install_docdir		:= $(prefix)/doc
install_bindir	  	:= $(prefix)/$(binsubdir)
install_libdir	  	:= $(prefix)/$(libsubdir)
install_configdir 	:= $(prefix)/config

ifneq ($(embedded_runpath_prefix),)
    runpath_libdir	:= $(embedded_runpath_prefix)/$(libsubdir)
    create_runpath_symlink ?= yes
endif

ifneq ($(QF_HOME),)
   QF_FLAGS             = -I$(QF_HOME)/include
   QF_LIBS              = -L$(QF_HOME)/$(libsubdir) -lquickfix
   QF_RPATH_LINK        = $(call rpathlink,$(QF_HOME)/$(libsubdir))
endif

ifeq ($(PLATFORM_HAS_READLINE),yes)
    ifeq ($(USE_READLINE),yes)
        READLINE_FLAGS  = -DHAVE_READLINE $(if $(READLINE_HOME),-I$(READLINE_HOME)/include)
        READLINE_LIBS   = $(if $(READLINE_HOME),-L$(READLINE_HOME)/$(libsubdir)) -lreadline -lncurses        
    endif
endif

slicedir		= $(top_srcdir)/slice
ICECPPFLAGS		= -I$(slicedir) -I$(ice_slicedir)
SLICE2CPPFLAGS		= $(ICECPPFLAGS)
CPPFLAGS	        = -I$(includedir)
LDFLAGS		        = $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(libdir) 

ifdef ice_src_dist
   ifeq ($(ice_cpp_dir), $(ice_dir)/cpp)
       ICE_LIB_DIR = -L$(ice_cpp_dir)/lib
   else
       ICE_LIB_DIR = -L$(ice_cpp_dir)/$(libsubdir)
   endif
   ICE_LIB_DIR = -L$(ice_cpp_dir)/lib
   ICE_FLAGS     = -I$(ice_cpp_dir)/include
endif
ifdef ice_bin_dist
   ICE_LIB_DIR = -L$(ice_dir)/$(libsubdir)
   ICE_FLAGS    = -I$(ice_dir)/include
endif
ICE_LIBS = $(ICE_LIB_DIR) -lIce -lSlice -lIceUtil

ifeq ($(FLEX_NOLINE),yes)
    FLEXFLAGS	       := -L
else
    FLEXFLAGS	       :=
endif

ifeq ($(BISON_NOLINE),yes)
    BISONFLAGS		:= -dvtl
else
    BISONFLAGS		:= -dvt
endif

ifeq ($(mkshlib),)
    $(error You need to define mkshlib in Make.rules.$(UNAME)) 
endif

ifdef ice_src_dist
    SLICEPARSERLIB	= $(ice_dir)/cpp/$(libsubdir)/$(call mklibfilename,Slice,$(VERSION))
    SLICE2CPP		= $(ice_dir)/cpp/$(binsubdir)/slice2cpp
    SLICE2FREEZE	= $(ice_dir)/cpp/$(binsubdir)/slice2freeze

    ice_libdir		= $(ice_dir)/cpp/$(libsubdir)
else
    SLICEPARSERLIB	= $(ice_dir)/$(libsubdir)/$(call mklibfilename,Slice,$(VERSION))
    SLICE2CPP		= $(ice_dir)/$(binsubdir)/slice2cpp
    SLICE2FREEZE	= $(ice_dir)/$(binsubdir)/slice2freeze

    ice_libdir		= $(ice_dir)/$(libsubdir)
endif

EVERYTHING		= all depend clean install 

.SUFFIXES:
.SUFFIXES:		.cpp .c .o

.cpp.o:
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

.c.o:
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $<

$(HDIR)/%.h %.cpp: $(SDIR)/%.ice
	rm -f $(HDIR)/$(*F).h $(*F).cpp
	$(SLICE2CPP) $(SLICE2CPPFLAGS) $<
	mv $(*F).h $(HDIR)

%.h %.cpp: %.ice
	rm -f $(*F).h $(*F).cpp
	$(SLICE2CPP) $(SLICE2CPPFLAGS) $(*F).ice	

%.h %.cpp: %.y
	rm -f $(*F).h $(*F).cpp
	bison $(BISONFLAGS) $<
	mv $(*F).tab.c $(*F).cpp
	mv $(*F).tab.h $(*F).h
	rm -f $(*F).output

%.cpp: %.l
	flex $(FLEXFLAGS) $<
	rm -f $@
	echo '#include <IceUtil/Config.h>' > $@
	cat lex.yy.c >> $@
	rm -f lex.yy.c

all:: $(SRCS) $(TARGETS)

depend:: $(SRCS)  $(patsubst $(SDIR)/%.ice,$(HDIR)/%.h,$(wildcard $(SDIR)/*F.ice)) $(SLICE_SRCS)
	-rm -f .depend
	if test -n "$(SRCS)" ; then \
	    $(CXX) -DMAKEDEPEND -M $(CXXFLAGS) $(CPPFLAGS) $(SRCS) | $(ice_dir)/config/makedepend.py >> .depend; \
	fi

clean::
	-rm -f $(TARGETS)
	-rm -f core *.o *.bak

ifneq ($(SLICE_SRCS),)

clean::
	rm -f $(addsuffix .cpp, $(basename $(notdir $(SLICE_SRCS))))
	rm -f $(addsuffix .h, $(basename $(notdir $(SLICE_SRCS))))
endif

ifneq ($(HDIR),)
clean::
	rm -f $(addprefix $(HDIR), $(addsuffix .h, $(basename $(subst $(SDIR),, \
	$(filter $(SDIR)/%.ice, $(SLICE_SRCS))))))
endif

ifneq ($(TEMPLATE_REPOSITORY),)
clean::
	rm -fr $(TEMPLATE_REPOSITORY)
endif

install::
