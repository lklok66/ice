# **********************************************************************
#
# Copyright (c) 2003-2009 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

#
# Select an installation base directory. The directory will be created
# if it does not exist.
#

prefix			?= /opt/Ice-$(VERSION)

#
# The "root directory" for runpath embedded in executables. Can be unset
# to avoid adding a runpath to Ice executables.
#
embedded_runpath_prefix  ?= /opt/Ice-$(VERSION_MAJOR).$(VERSION_MINOR)

#
# Define OPTIMIZE as yes if you want to build with optimization.
# Otherwise the Ice extension is built with debug information.
#

#OPTIMIZE		= yes

#
# Define LP64 as yes if you want to build in 64 bit mode on a platform
# that supports both 32 and 64 bit.
#
#LP64			:= yes

#
# If the Ruby interpreter is in your PATH, the settings below will
# work properly in most cases. If you want to use a particular
# installation of Ruby, set RUBY_HOME with the installation directory.
#

ifneq ($(RUBY_HOME),)
    RUBY = $(RUBY_HOME)/bin/ruby
else
    RUBY = ruby
endif

RUBY_INCLUDE_DIR	= $(shell $(RUBY) -e 'require "rbconfig"; puts Config::expand("$$(archdir)")')
RUBY_LIB_DIR		= $(shell $(RUBY) -e 'require "rbconfig"; puts Config::expand("$$(libdir)")')

RUBY_SHARED		= $(shell $(RUBY) -e 'require "rbconfig"; puts Config::MAKEFILE_CONFIG["ENABLE_SHARED"]')

ifeq ("$(RUBY_SHARED)","yes")
    RUBY_LIB		= $(shell $(RUBY) -e 'require "rbconfig"; puts Config::expand("-l$$(RUBY_SO_NAME)")')
else
    RUBY_LIB		= $(shell $(RUBY) -e 'require "rbconfig"; puts Config::expand("-l$$(RUBY_SO_NAME)-static")')
endif

RUBY_FLAGS		= -I$(RUBY_INCLUDE_DIR)
RUBY_LIBS		= -L$(RUBY_LIB_DIR) $(RUBY_LIB)

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

#
# Common definitions
#
ice_language     = rb
ice_require_cpp  = yes
slice_translator = slice2rb

ifeq ($(shell test -f $(top_srcdir)/config/Make.common.rules && echo 0),0)
    include $(top_srcdir)/config/Make.common.rules
else
    include $(top_srcdir)/../config/Make.common.rules
endif

libdir			= $(top_srcdir)/ruby
install_rubydir		= $(prefix)/ruby
install_libdir	        = $(prefix)/ruby

#
# Platform specific definitions
#
ifeq ($(shell test -f $(top_srcdir)/config/Make.rules.$(UNAME) && echo 0),0)
    configdir = $(top_srcdir)/config
else
    configdir = $(top_srcdir)/../cpp/config
endif 
include	 $(configdir)/Make.rules.$(UNAME)

ifdef ice_src_dist
    ifeq ($(ice_cpp_dir), $(ice_dir)/cpp)
        ICE_LIB_DIR = -L$(ice_cpp_dir)/lib
    else
        ICE_LIB_DIR = -L$(ice_cpp_dir)/$(libsubdir)
    endif
    ICE_FLAGS 	= -I$(ice_cpp_dir)/include
endif
ifdef ice_bin_dist
    ICE_LIB_DIR = -L$(ice_dir)/$(libsubdir)
    ICE_FLAGS	= -I$(ice_dir)/include
endif
ICE_LIBS = $(ICE_LIB_DIR) -lIce -lSlice -lIceUtil

ifneq ($(embedded_runpath_prefix),)
   runpath_libdir	:= $(embedded_runpath_prefix)/$(libsubdir)
endif

CPPFLAGS		=
ICECPPFLAGS		= -I$(slicedir)
SLICE2RBFLAGS		= $(ICECPPFLAGS)
LDFLAGS			= $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(libdir)

ifdef ice_src_dist
    ifeq ($(ice_cpp_dir), $(ice_dir)/cpp)
        SLICE2RB = $(ice_cpp_dir)/bin/slice2rb
    else
        SLICE2RB = $(ice_cpp_dir)/$(binsubdir)/slice2rb
    endif
else
    SLICE2RB = $(ice_dir)/$(binsubdir)/slice2rb
endif

#
# A Ruby extension library cannot have a "lib" prefix, so Ruby-specific
# functions are defined that strip "lib" from the regular library name.
#
mkrblibfilename		= $(subst lib,,$(call mklibfilename,$(1),$(2)))
mkrbsoname		= $(subst lib,,$(call mksoname,$(1),$(2)))
mkrblibname		= $(subst lib,,$(call mklibname,$(1)))

EVERYTHING		= all depend clean install

.SUFFIXES:
.SUFFIXES:		.cpp .o .rb

all:: $(SRCS)

%.rb: $(SDIR)/%.ice
	rm -f $(*F).rb
	$(SLICE2RB) $(SLICE2RBFLAGS) $<

.cpp.o:
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

clean::
	-rm -f $(TARGETS)
	-rm -f core *.o *.bak

all:: $(SRCS) $(TARGETS)

depend:: $(SRCS) $(SLICE_SRCS)
	-rm -f .depend
	if test -n "$(SRCS)" ; then \
	    $(CXX) -DMAKEDEPEND -M $(CXXFLAGS) $(CPPFLAGS) $(SRCS) | $(ice_dir)/config/makedepend.py >> .depend; \
	fi

ifneq ($(TEMPLATE_REPOSITORY),)
clean::
	rm -fr $(TEMPLATE_REPOSITORY)
endif

install::
