# **********************************************************************
#
# Copyright (c) 2003-2007 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

ifndef ICE_HOME
    ifneq ($(shell test -f /usr/include/Ice/Ice.h && echo 0),0)
$(error Ice installation not found, please set ICE_HOME!)
    endif
endif

#
# Select an installation base directory. The directory will be created
# if it does not exist.
#

prefix			= /opt/IceRuby-$(VERSION)

#
# The "root directory" for runpath embedded in executables. Can be unset
# to avoid adding a runpath to Ice executables.
#
embedded_runpath_prefix  ?= /opt/Ice-$(VERSION_MAJOR).$(VERSION_MINOR)

#
# Define OPTIMIZE as yes if you want to build with optimization.
# Otherwise the Ice extension is built with debug information.
#

#OPTIMIZE		= yes

#
# Define LP64 as yes if you want to build in 64 bit mode on a platform
# that supports both 32 and 64 bit.
#
#LP64			:= yes

#
# If the Ruby interpreter is in your PATH, the settings below will
# work properly in most cases. If you want to use a particular
# installation of Ruby, set RUBY_HOME with the installation directory.
#

ifneq ($(RUBY_HOME),)
    RUBY = $(RUBY_HOME)/bin/ruby
else
    RUBY = ruby
endif

RUBY_INCLUDE_DIR	= $(shell $(RUBY) -e 'require "rbconfig"; puts Config::expand("$$(archdir)")')
RUBY_LIB_DIR		= $(shell $(RUBY) -e 'require "rbconfig"; puts Config::expand("$$(libdir)")')

RUBY_SHARED		= $(shell $(RUBY) -e 'require "rbconfig"; puts Config::MAKEFILE_CONFIG["ENABLE_SHARED"]')

ifeq ("$(RUBY_SHARED)","yes")
    RUBY_LIB		= $(shell $(RUBY) -e 'require "rbconfig"; puts Config::expand("-l$$(RUBY_SO_NAME)")')
else
    RUBY_LIB		= $(shell $(RUBY) -e 'require "rbconfig"; puts Config::expand("-l$$(RUBY_SO_NAME)-static")')
endif

RUBY_FLAGS		= -I$(RUBY_INCLUDE_DIR)
RUBY_LIBS		= -L$(RUBY_LIB_DIR) $(RUBY_LIB)

ifneq ($(ICE_HOME),)
    ifeq ($(LP64),yes)
       ICE_LIB_DIRS	= -L$(ICE_HOME)/lib64 -L$(ICE_HOME)/lib
    else 
       ICE_LIB_DIRS	= -L$(ICE_HOME)/lib
    endif
endif

ICE_LIBS		= $(ICE_LIB_DIRS) -lIce -lSlice -lIceUtil

ifneq ($(ICE_HOME),)
    ICE_FLAGS		= -I$(ICE_HOME)/include
endif


# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

SHELL			= /bin/sh
VERSION_MAJOR           = 3
VERSION_MINOR           = 2
VERSION			= 3.2.0
SOVERSION		= 32
bindir			= $(top_srcdir)/bin
libdir			= $(top_srcdir)/ruby
rubydir			= $(top_srcdir)/ruby

ifneq ($(ICE_HOME),)
    slicedir		= $(ICE_HOME)/slice
else
    slicedir		= /usr/share/Ice-$(VERSION)/slice
endif

install_bindir		= $(prefix)/bin
install_rubydir		= $(prefix)/ruby

INSTALL			= cp -fp
INSTALL_PROGRAM		= ${INSTALL}
INSTALL_LIBRARY		= ${INSTALL}
INSTALL_DATA		= ${INSTALL}

UNAME			:= $(shell uname)

#
# Platform specific definitions
#
ifeq ($(shell test -f $(top_srcdir)/config/Make.rules.$(UNAME) && echo 0),0)
    configdir		= $(top_srcdir)/config
else
    configdir		= $(ICE_HOME)/config
endif
include	 $(configdir)/Make.rules.$(UNAME)

install_libdir	        = $(prefix)/ruby

ifneq ($(embedded_runpath_prefix),)
   ifeq ($(LP64),yes)
       runpath_libdir	  := $(embedded_runpath_prefix)/lib$(lp64suffix)
   else
       runpath_libdir	  := $(embedded_runpath_prefix)/lib
   endif
endif

CPPFLAGS		=
ICECPPFLAGS		= -I$(slicedir)
SLICE2RBFLAGS		= $(ICECPPFLAGS)

LDFLAGS			= $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(libdir)

#
# Default functions for shared library names. Note that since ruby
# extension libraries cannot have a "lib" prefix, Ruby-specific functions 
# are defined.
#

ifeq ($(mklibfilename),)
    mklibfilename	= $(if $(2),lib$(1).so.$(2),$(1).so)
endif

ifeq ($(mksoname),)
    mksoname		= $(if $(2),lib$(1).so.$(2),$(1).so)
endif

ifeq ($(mklibname),)
    mklibname		= lib$(1).so
endif

ifndef mklibtargets
    mklibtargets	= $(1) $(2) $(3)
endif

ifeq ($(mkshlib),)
    $(error You need to define mkshlib in Make.rules.$(UNAME)) 
endif


ifeq ($(installlib),)
    installlib		= $(INSTALL) $(2)/$(3) $(1); \
			  rm -f $(1)/$(4); ln -s $(3) $(1)/$(4); \
			  rm -f $(1)/$(5); ln -s $(4) $(1)/$(5); \
			  chmod a+rx $(1)/$(3) 
endif

ifeq ($(installdata),)
    installdata		= $(INSTALL_DATA) $(1) $(2); \
			  chmod a+r $(2)/$(notdir $(1))
endif

ifeq ($(installprogram),)
    installprogram	= $(INSTALL_PROGRAM) $(1) $(2); \
			  chmod a+rx $(2)/$(notdir $(1))
endif

ifeq ($(mkdir),)
    mkdir		= mkdir $(1) ; \
			  chmod a+rx $(1)
endif


#
# A Ruby extension library cannot have a "lib" prefix, so Ruby-specific
# functions are defined that strip "lib" from the regular library name.
#
mkrblibfilename		= $(subst lib,,$(call mklibfilename,$(1),$(2)))
mkrbsoname		= $(subst lib,,$(call mksoname,$(1),$(2)))
mkrblibname		= $(subst lib,,$(call mklibname,$(1)))

ifneq ($(ICE_HOME),)
   SLICE2RB		= $(ICE_HOME)/bin/slice2rb
else
   SLICE2RB		= /usr/bin/slice2rb
endif

EVERYTHING		= all depend clean install

.SUFFIXES:
.SUFFIXES:		.cpp .o .rb

all:: $(SRCS)

%.rb: $(SDIR)/%.ice
	rm -f $(*F).rb
	$(SLICE2RB) $(SLICE2RBFLAGS) $<

.cpp.o:
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

clean::
	-rm -f $(TARGETS)
	-rm -f core *.o *.bak

all:: $(SRCS) $(TARGETS)

depend:: $(SRCS) $(SLICE_SRCS)
	-rm -f .depend
	if test -n "$(SRCS)" ; then \
	    $(CXX) -DMAKEDEPEND -M $(CXXFLAGS) $(CPPFLAGS) $(SRCS) | \
	    $(configdir)/makedepend.py >> .depend; \
	fi

ifneq ($(TEMPLATE_REPOSITORY),)
clean::
	rm -fr $(TEMPLATE_REPOSITORY)
endif

install::
