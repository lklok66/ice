======================================================================
Ice for Ruby
======================================================================

This file describes how to compile Ice for Ruby on Linux.


Requirements
------------

- Ice @ver@ for C++ development kit
- Ruby 1.8.1 or later

You can build Ice for Ruby using a source or RPM installation of Ruby.
If you prefer to use RPMs, the following components are required:

  ruby
  ruby-libs
  ruby-devel


Compiling Ice for Ruby
----------------------

The instructions for compiling the Ice extension assume that you have
already installed Ruby.

Follow these steps:

1. If you installed Ruby in a non-standard location, set the RUBY_HOME
   environment variable to the installation directory. For example:

   $ export RUBY_HOME=/opt/ruby-1.8.5

2. If you installed the Ice @ver@ for C++ development kit in a
   non-standard location, set the ICE_HOME environment variable to the
   installation directory. For example:

   $ export ICE_HOME=/opt/Ice-@ver@

3. If necessary, modify your PATH environment variable to include the
   following directories:

   $ export PATH=$ICE_HOME/bin:$RUBY_HOME/bin:$PATH

4. If necessary, modify your LD_LIBRARY_PATH environment variable to
   include $ICE_HOME/lib:

   $ export LD_LIBRARY_PATH=$ICE_HOME/lib:$LD_LIBRARY_PATH

5. Review the settings in config/Make.rules and adjust as necessary.
   For example, you may wish to enable OPTIMIZE.

6. Run make.

If no errors occurred, you can now begin using Ice for Ruby.


Using Ice for Ruby
------------------

The Ruby interpreter must be able to locate the Ice extension. One way
to configure the interpreter is to define the RUBYLIB environment
variable as follows:

  $ export RUBYLIB=/opt/IceRuby-@ver@/ruby:$RUBYLIB

This example assumes that your Ice for Ruby installation is located in
the /opt/IceRuby-@ver@ directory.

In addition, you must modify your PATH environment variable to include
the directory /opt/IceRuby-@ver@/bin as shown below:

  $ export PATH=/opt/IceRuby-@ver@/bin:$PATH

You must also modify LD_LIBRARY_PATH to include the directory
/opt/IceRuby-@ver@/lib:

  $ export LD_LIBRARY_PATH=/opt/IceRuby-@ver@/lib:LD_LIBRARY_PATH

To verify that Ruby can load the Ice extension successfully, open a
command window and start the interpreter using irb:

  $ irb
  irb(main):001:0>

At the prompt, enter

  require "Ice"

If the interpreter responds with the value "true", the Ice extension
was loaded successfully. Enter "exit" to quit the interpreter.


Limitations
-----------

Ruby's lack of support for native threads makes it impractical for
ZeroC to implement server-side functionality, therefore Ice for Ruby
can only be used in client applications. If you have a need for this
feature and wish to sponsor its development, please contact us at
info@zeroc.com.


SELinux Issue on Red Hat Enterprise Linux
-----------------------------------------

If SELinux is enabled on your system, you may encounter this error
message when Ruby attempts to load the Ice extension:

  "cannot restore segment prot after reloc: Permission denied"

There are two ways to solve this problem:

- Change the default security context for the Ice extension using the
  following command:

  $ chcon -t texrel_shlib_t /opt/IceRuby-@ver@/ruby/IceRuby.so

  Replace /opt/IceRuby-@ver@ with your installation directory.

- Disable SELinux completely by adding the following line to your
  /etc/sysconfig/selinux file:

  SELINUX=disabled

For more information on SELinux in Red Hat Enterprise Linux 4, refer
to the link below:

  http://www.redhat.com/docs/manuals/enterprise/RHEL-4-Manual/selinux-guide/


Running the demos
-----------------

The demos directory contains Ruby versions of the Ice sample programs.
Note that only clients are provided, since Ice for Ruby does not
support server-side activities. In order to run a sample client, you
must first start its corresponding server from another Ice language
mapping, such as C++.

As an example, let's run the hello application in demo/Ice/hello using
the C++ server. Assuming that your compiled Ice source distribution is
located in /tmp/Ice-@ver@, and that you have already compiled the
sample C++ programs, we begin by starting the server:

  $ cd /tmp/Ice-@ver@/demo/Ice/hello
  $ server

In a separate window, start the client:

  $ cd /opt/IceRuby-@ver@/demo/Ice/hello
  $ ruby Client.rb

Some demo directories contain README files if additional requirements
are necessary.


Running the tests
-----------------

You can run the test suite, provided that you have installed Python.
Furthermore, the Ice for C++ tests must be built in the directory
specified by the ICE_HOME environment variable.

Open a command window and change to the top-level directory. At the
command prompt, execute:

  $ python allTests.py

You can also run tests individually by changing to the test directory
and running this command:

  $ python run.py

If everything worked out, you should see lots of "ok" messages. In
case of a failure, the tests abort with "failed".
