This distribution contains the Ice for Java source code, class files,
and HTML reference material. The following sections describe the
requirements for using Ice for Java and provide instructions for
installing it.


======================================================================
Requirements
======================================================================


Operating systems
-----------------

Ice for Java has been tested under Linux, Solaris, HP-UX, MacOS X, AIX
and Windows 2000/XP, but due to the portability of Java, it is very
likely that it will also work on other platforms for which a suitable
Java implementation is available.

Note, however, that you will need the Slice to Java translator (see
below). ZeroC provides translator binaries for supported platforms.
For other platforms, you will have to either port Ice for C++ (which
contains the Slice to Java translator), or you will have to translate
Slice to Java on a supported platform, and copy the resulting Java
files to your target platform.


Java version
------------

Ice for Java requires Java version 1.4.1 or later. Older versions are
not supported, because Ice makes use of the new java.nio packages.
(java.nio was introduced in version 1.4.0, but was broken on Windows.)

You can download the Java 2 Platform, Standard Edition from
http://java.sun.com/j2se/.

Make sure to add javac and java to your PATH.

On HP-UX 11, we recommend using JDK 1.4.2.06 along with patch
PHNE_29887 to avoid the potential for hangs during shutdown. See the
link below for more information:

http://www.hp.com/products1/unix/java/java2/sdkrte14/downloads/index_pa-risc.html

When using the Ice for Java SSL plugin, you may experience occasional
hangs. The most common reason is that your system's entropy pool is
empty. A workaround is to edit <java.home>/lib/security/java.security
to use /dev/urandom instead of /dev/random.


Slice to Java translator
------------------------

You will need the Slice to Java translator and supporting executables
and libraries. You can download a binary distribution from the ZeroC
web site, or you can build Ice for C++ yourself.

Binary distributions for the supported platforms are available at

http://www.zeroc.com/download.html


Berkeley DB
-----------

Freeze for Java uses Berkeley DB as its underlying database. It
requires Berkeley DB 4.2.52.

Even though Berkeley DB is included with many Linux distributions, the
Java files for Berkeley DB are usually not available. This means that
you must build Berkeley DB manually.

You can download Berkeley DB from:

http://www.sleepycat.com/download

When you build Berkeley DB, make sure to configure Berkeley DB with
Java support. For Linux, this is done by specifying --enable-java with
"configure". For Windows 2000/XP, you must select the "db_java --
Win32 Release" project. For details, please see:

http://www.sleepycat.com/docs/index.html

On AIX with Java 1.4.2, you also need the non-public "java-globalrefs"
patch for Berkeley DB 4.2.52.

Make sure to add db.jar to your CLASSPATH, and verify that the
Berkeley DB shared libraries are in your java.library.path. On Linux,
this can be achieved by adding <Berkeley DB home>/lib to your
LD_LIBRARY_PATH, for example:

$ export LD_LIBRARY_PATH=/opt/db4/lib:$LD_LIBRARY_PATH

Note that the Ice for Java distribution is compiled against Berkeley
DB 4.2.52.


bzip2
-----

Ice for Java supports protocol compression using the bzip2 classes
included with Apache Ant (see "Compiling the Source" below).

Compression is automatically enabled if the classes are present in the
CLASSPATH. You can either add ant.jar to your CLASSPATH, or download
only the bzip2 classes from

http://www.kohsuke.org/bzip2/

Note that these classes are a pure Java implementation of the bzip2
algorithm and therefore add significant latency to Ice requests.


Python
------

To run the automated test suite, you will need Python 2.2 or later. 
If you have no interest in running the test scripts, Python is not 
required.  Linux distributions usually include Python. For Windows 
2000/XP, you can download a Python distribution from:

http://www.python.org/download


======================================================================
Testing
======================================================================

You can run the Ice for Java test suite, provided that you have
installed Python:

python allTests.py

If everything worked out, you should see lots of "ok" messages. In
case of a failure, the tests abort with "failed".

If you want to try out any of the demos, make sure to add lib/Ice.jar
and "classes" to your CLASSPATH. Then change to the desired demo
directory and follow the instructions in the README file. If no README
file is present, the demo can be run by entering the following command
to start the server:

$ java Server

Then in a separate window enter the following command to start the
client:

$ java Client


======================================================================
Compiling the Source
======================================================================

There is generally no need to compile Ice for Java, because this
distribution already contains the class files for the Ice core, Ice
services, examples and tests.

If you want to rebuild the source code, you will need the 'ant'
utility, version 1.6 or later, which is available here:

http://ant.apache.org/

You must also install ant's "optional tasks" (optional.jar) in the
same directory as ant.jar.

After installing ant, run the following commands to completely rebuild
the Ice for Java source code:

$ ant clean
$ ant

NOTE: If you use cygwin, be aware that ant 1.6.2 has a bug that causes
it to misinterpret CLASSPATH entries having forward slashes.  The
workaround is to change your CLASSPATH to use backslashes, or revert
to ant 1.6.1.


======================================================================
Installation
======================================================================

No automatic installation for Ice for Java is supported. Simply copy
the Ice.jar file from the lib directory to the directory of your
choice, and then add Ice.jar to your CLASSPATH.


======================================================================
MacOS X Notes
======================================================================

On MacOS X, an Ice server may not correctly detect the closure of
client connections, which can lead to a hang during server shutdown.
This appears to be caused by a problem in the JVM implementation, but
we are still looking into this issue. Until we resolve this matter, We
recommend the use of timeouts in object adapter endpoints.
